{"version":3,"file":"bundle.js","sources":["../node_modules/style-inject/dist/style-inject.es.js","../src/style/cell.ts","../src/style/core.ts","../src/style/row.ts","../src/hooks/useLayoutEffect.ts","../src/hooks/useFocusRef.ts","../src/formatters/SelectCellFormatter.tsx","../src/formatters/ValueFormatter.tsx","../src/formatters/ToggleGroupFormatter.tsx","../src/hooks/useRowSelection.ts","../src/utils/colSpanUtils.ts","../src/utils/domUtils.ts","../src/utils/keyboardUtils.ts","../src/utils/selectedCellUtils.ts","../src/utils/index.ts","../src/Columns.tsx","../src/hooks/useCalculatedColumns.ts","../src/hooks/useGridDimensions.ts","../src/hooks/useLatestFunc.ts","../src/hooks/useRovingCellRef.ts","../src/hooks/useRovingRowRef.ts","../src/hooks/useViewportColumns.ts","../src/hooks/useViewportRows.ts","../src/headerCells/SortableHeaderCell.tsx","../src/HeaderCell.tsx","../src/HeaderRow.tsx","../src/Cell.tsx","../src/Row.tsx","../src/GroupCell.tsx","../src/GroupRow.tsx","../src/SummaryCell.tsx","../src/SummaryRow.tsx","../src/StickyRow.tsx","../src/EditCell.tsx","../src/DragHandle.tsx","../src/DataGrid.tsx","../src/editors/TextEditor.tsx"],"sourcesContent":["function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","import { css } from '@linaria/core';\n\nexport const cell = css`\n  contain: strict;\n  contain: size layout style paint;\n  padding: 0 8px;\n  border-right: 1px solid var(--border-color);\n  border-bottom: 1px solid var(--border-color);\n  background-color: inherit;\n\n  white-space: nowrap;\n  overflow: hidden;\n  overflow: clip;\n  text-overflow: ellipsis;\n  outline: none;\n\n  &[aria-selected='true'] {\n    box-shadow: inset 0 0 0 2px var(--selection-color);\n  }\n`;\n\nexport const cellClassname = `rdg-cell ${cell}`;\n\nconst cellFrozen = css`\n  position: sticky;\n  /* Should have a higher value than 0 to show up above unfrozen cells */\n  z-index: 1;\n`;\n\nexport const cellFrozenClassname = `rdg-cell-frozen ${cellFrozen}`;\n\nexport const cellFrozenLast = css`\n  box-shadow: 2px 0 5px -2px rgba(136, 136, 136, 0.3);\n`;\n\nexport const cellFrozenLastClassname = `rdg-cell-frozen-last ${cellFrozenLast}`;\n","import { css } from '@linaria/core';\nimport { row } from './row';\n\nconst lightTheme = `\n  --color: #000;\n  --border-color: #ddd;\n  --summary-border-color: #aaa;\n  --background-color: hsl(0deg 0% 100%);\n  --header-background-color: hsl(0deg 0% 97.5%);\n  --row-hover-background-color: hsl(0deg 0% 96%);\n  --row-selected-background-color: hsl(207deg 76% 92%);\n  --row-selected-hover-background-color: hsl(207deg 76% 88%);\n\n  --checkbox-color: hsl(207deg 100% 29%);\n  --checkbox-focus-color: hsl(207deg 100% 69%);\n  --checkbox-disabled-border-color: #ccc;\n  --checkbox-disabled-background-color: #ddd;\n`;\n\nconst darkTheme = `\n  --color: #ddd;\n  --border-color: #444;\n  --summary-border-color: #555;\n  --background-color: hsl(0deg 0% 13%);\n  --header-background-color: hsl(0deg 0% 10.5%);\n  --row-hover-background-color: hsl(0deg 0% 9%);\n  --row-selected-background-color: hsl(207deg 76% 42%);\n  --row-selected-hover-background-color: hsl(207deg 76% 38%);\n\n  --checkbox-color: hsl(207deg 100% 79%);\n  --checkbox-focus-color: hsl(207deg 100% 89%);\n  --checkbox-disabled-border-color: #000;\n  --checkbox-disabled-background-color: #333;\n`;\n\nconst root = css`\n  ${lightTheme}\n  --selection-color: #66afe9;\n  --font-size: 14px;\n\n  color-scheme: var(--color-scheme, light dark);\n\n  /* https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context */\n  /* We set a stacking context so internal elements don't render on top of external components. */\n  contain: strict;\n  contain: size layout style paint;\n  content-visibility: auto;\n  height: 350px;\n  border: 1px solid var(--border-color);\n  box-sizing: border-box;\n  overflow: auto;\n  user-select: none;\n  background-color: var(--background-color);\n  color: var(--color);\n  font-size: var(--font-size);\n  direction: ltr;\n\n  /* set stacking context in safari */\n  @supports not (contain: strict) {\n    position: relative;\n    z-index: 0;\n  }\n\n  *,\n  *::before,\n  *::after {\n    box-sizing: inherit;\n  }\n\n  &.rdg-dark {\n    --color-scheme: dark;\n    ${darkTheme}\n  }\n\n  &.rdg-light {\n    --color-scheme: light;\n  }\n\n  @media (prefers-color-scheme: dark) {\n    &:not(.rdg-light) {\n      ${darkTheme}\n    }\n  }\n`;\n\nexport const rootClassname = `rdg ${root}`;\n\nconst viewportDragging = css`\n  &.${row} {\n    cursor: move;\n  }\n`;\n\nexport const viewportDraggingClassname = `rdg-viewport-dragging ${viewportDragging}`;\n","import { css } from '@linaria/core';\n\nexport const row = css`\n  contain: strict;\n  contain: size layout style paint;\n  display: grid;\n  grid-template-rows: var(--row-height);\n  grid-template-columns: var(--template-columns);\n  position: absolute;\n  left: 0;\n  width: var(--row-width);\n  height: var(--row-height); /* needed on Firefox */\n  line-height: var(--row-height);\n  background-color: var(--background-color);\n\n  &:hover {\n    background-color: var(--row-hover-background-color);\n  }\n\n  &[aria-selected='true'] {\n    background-color: var(--row-selected-background-color);\n\n    &:hover {\n      background-color: var(--row-selected-hover-background-color);\n    }\n  }\n`;\n\nexport const rowClassname = `rdg-row ${row}`;\n","// eslint-disable-next-line no-restricted-imports\nimport { useEffect, useLayoutEffect as useOriginalLayoutEffect } from 'react';\n\n// Silence silly warning\n// https://reactjs.org/link/uselayouteffect-ssr\nexport const useLayoutEffect = typeof window === 'undefined' ? useEffect : useOriginalLayoutEffect;\n","import { useRef } from 'react';\nimport { useLayoutEffect } from './useLayoutEffect';\n\nexport function useFocusRef<T extends HTMLOrSVGElement>(isSelected: boolean) {\n  const ref = useRef<T>(null);\n\n  useLayoutEffect(() => {\n    if (!isSelected) return;\n    ref.current?.focus({ preventScroll: true });\n  }, [isSelected]);\n\n  return {\n    ref,\n    tabIndex: isSelected ? 0 : -1\n  };\n}\n","import clsx from 'clsx';\nimport { css } from '@linaria/core';\nimport { useFocusRef } from '../hooks/useFocusRef';\n\nconst checkboxLabel = css`\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  position: absolute;\n  inset: 0;\n  margin-right: 1px; /* align checkbox in row group cell */\n`;\n\nconst checkboxLabelClassname = `rdg-checkbox-label ${checkboxLabel}`;\n\nconst checkboxInput = css`\n  all: unset;\n  width: 0;\n  margin: 0;\n`;\n\nconst checkboxInputClassname = `rdg-checkbox-input ${checkboxInput}`;\n\nconst checkbox = css`\n  content: '';\n  width: 20px;\n  height: 20px;\n  border: 2px solid var(--border-color);\n  background-color: var(--background-color);\n\n  .${checkboxInput}:checked + & {\n    background-color: var(--checkbox-color);\n    box-shadow: inset 0px 0px 0px 4px var(--background-color);\n  }\n\n  .${checkboxInput}:focus + & {\n    border-color: var(--checkbox-focus-color);\n  }\n`;\n\nconst checkboxClassname = `rdg-checkbox ${checkbox}`;\n\nconst checkboxLabelDisabled = css`\n  cursor: default;\n\n  .${checkbox} {\n    border-color: var(--checkbox-disabled-border-color);\n    background-color: var(--checkbox-disabled-background-color);\n  }\n`;\n\nconst checkboxLabelDisabledClassname = `rdg-checkbox-label-disabled ${checkboxLabelDisabled}`;\n\ntype SharedInputProps = Pick<\n  React.InputHTMLAttributes<HTMLInputElement>,\n  'disabled' | 'onClick' | 'aria-label' | 'aria-labelledby'\n>;\n\ninterface SelectCellFormatterProps extends SharedInputProps {\n  isCellSelected: boolean;\n  value: boolean;\n  onChange: (value: boolean, isShiftClick: boolean) => void;\n}\n\nexport function SelectCellFormatter({\n  value,\n  isCellSelected,\n  disabled,\n  onClick,\n  onChange,\n  'aria-label': ariaLabel,\n  'aria-labelledby': ariaLabelledBy\n}: SelectCellFormatterProps) {\n  const { ref, tabIndex } = useFocusRef<HTMLInputElement>(isCellSelected);\n\n  function handleChange(e: React.ChangeEvent<HTMLInputElement>) {\n    onChange(e.target.checked, (e.nativeEvent as MouseEvent).shiftKey);\n  }\n\n  return (\n    <label className={clsx(checkboxLabelClassname, { [checkboxLabelDisabledClassname]: disabled })}>\n      <input\n        aria-label={ariaLabel}\n        aria-labelledby={ariaLabelledBy}\n        ref={ref}\n        type=\"checkbox\"\n        tabIndex={tabIndex}\n        className={checkboxInputClassname}\n        disabled={disabled}\n        checked={value}\n        onChange={handleChange}\n        onClick={onClick}\n      />\n      <div className={checkboxClassname} />\n    </label>\n  );\n}\n","import type { FormatterProps } from '../types';\n\nexport function ValueFormatter<R, SR>(props: FormatterProps<R, SR>) {\n  try {\n    return <>{props.row[props.column.key as keyof R]}</>;\n  } catch {\n    return null;\n  }\n}\n","import { css } from '@linaria/core';\nimport type { GroupFormatterProps } from '../types';\nimport { useFocusRef } from '../hooks/useFocusRef';\n\nconst groupCellContent = css`\n  outline: none;\n`;\n\nconst groupCellContentClassname = `rdg-group-cell-content ${groupCellContent}`;\n\nconst caret = css`\n  margin-left: 4px;\n  stroke: currentColor;\n  stroke-width: 1.5px;\n  fill: transparent;\n  vertical-align: middle;\n\n  > path {\n    transition: d 0.1s;\n  }\n`;\n\nconst caretClassname = `rdg-caret ${caret}`;\n\nexport function ToggleGroupFormatter<R, SR>({\n  groupKey,\n  isExpanded,\n  isCellSelected,\n  toggleGroup\n}: GroupFormatterProps<R, SR>) {\n  const { ref, tabIndex } = useFocusRef<HTMLSpanElement>(isCellSelected);\n\n  function handleKeyDown({ key }: React.KeyboardEvent<HTMLSpanElement>) {\n    if (key === 'Enter') {\n      toggleGroup();\n    }\n  }\n\n  const d = isExpanded ? 'M1 1 L 7 7 L 13 1' : 'M1 7 L 7 1 L 13 7';\n\n  return (\n    <span\n      ref={ref}\n      className={groupCellContentClassname}\n      tabIndex={tabIndex}\n      onKeyDown={handleKeyDown}\n    >\n      {groupKey}\n      <svg viewBox=\"0 0 14 8\" width=\"14\" height=\"8\" className={caretClassname} aria-hidden>\n        <path d={d} />\n      </svg>\n    </span>\n  );\n}\n","import { createContext, useContext } from 'react';\nimport type { SelectRowEvent } from '../types';\n\nconst RowSelectionContext = createContext<boolean | undefined>(undefined);\n\nexport const RowSelectionProvider = RowSelectionContext.Provider;\n\nconst RowSelectionChangeContext = createContext<\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ((selectRowEvent: SelectRowEvent<any>) => void) | undefined\n>(undefined);\n\nexport const RowSelectionChangeProvider = RowSelectionChangeContext.Provider;\n\nexport function useRowSelection<R>(): [boolean, (selectRowEvent: SelectRowEvent<R>) => void] {\n  const rowSelectionContext = useContext(RowSelectionContext);\n  const rowSelectionChangeContext = useContext(RowSelectionChangeContext);\n\n  if (rowSelectionContext === undefined || rowSelectionChangeContext === undefined) {\n    throw new Error('useRowSelection must be used within DataGrid cells');\n  }\n\n  return [rowSelectionContext, rowSelectionChangeContext];\n}\n","import type { CalculatedColumn, ColSpanArgs } from '../types';\n\nexport function getColSpan<R, SR>(\n  column: CalculatedColumn<R, SR>,\n  lastFrozenColumnIndex: number,\n  args: ColSpanArgs<R, SR>\n): number | undefined {\n  const colSpan = typeof column.colSpan === 'function' ? column.colSpan(args) : 1;\n  if (\n    Number.isInteger(colSpan) &&\n    colSpan! > 1 &&\n    // ignore colSpan if it spans over both frozen and regular columns\n    (!column.frozen || column.idx + colSpan! - 1 <= lastFrozenColumnIndex)\n  ) {\n    return colSpan!;\n  }\n  return undefined;\n}\n","export function stopPropagation(event: React.SyntheticEvent) {\n  event.stopPropagation();\n}\n","// https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values\nconst nonInputKeys = new Set([\n  // Special keys\n  'Unidentified',\n  // Modifier keys\n  'Alt',\n  'AltGraph',\n  'CapsLock',\n  'Control',\n  'Fn',\n  'FnLock',\n  'Meta',\n  'NumLock',\n  'ScrollLock',\n  'Shift',\n  // Whitespace keys\n  'Tab',\n  // Navigation keys\n  'ArrowDown',\n  'ArrowLeft',\n  'ArrowRight',\n  'ArrowUp',\n  'End',\n  'Home',\n  'PageDown',\n  'PageUp',\n  // Editing\n  'Insert',\n  // UI keys\n  'ContextMenu',\n  'Escape',\n  'Pause',\n  'Play',\n  // Device keys\n  'PrintScreen',\n  // Function keys\n  'F1',\n  // 'F2', /!\\ specifically allowed, do not edit\n  'F3',\n  'F4',\n  'F5',\n  'F6',\n  'F7',\n  'F8',\n  'F9',\n  'F10',\n  'F11',\n  'F12'\n]);\n\nexport function isCtrlKeyHeldDown(e: React.KeyboardEvent): boolean {\n  return (e.ctrlKey || e.metaKey) && e.key !== 'Control';\n}\n\nexport function isDefaultCellInput(event: React.KeyboardEvent<HTMLDivElement>): boolean {\n  return !nonInputKeys.has(event.key);\n}\n\n/**\n * By default, the following navigation keys are enabled while an editor is open, under specific conditions:\n * - Tab:\n *   - The editor must be an <input>, a <textarea>, or a <select> element.\n *   - The editor element must be the only immediate child of the editor container/a label.\n */\nexport function onEditorNavigation({ key, target }: React.KeyboardEvent<HTMLDivElement>): boolean {\n  if (\n    key === 'Tab' &&\n    (target instanceof HTMLInputElement ||\n      target instanceof HTMLTextAreaElement ||\n      target instanceof HTMLSelectElement)\n  ) {\n    return target.matches(\n      '.rdg-editor-container > :only-child, .rdg-editor-container > label:only-child > :only-child'\n    );\n  }\n  return false;\n}\n","import type { CalculatedColumn, Position, GroupRow, CellNavigationMode, Maybe } from '../types';\nimport { getColSpan } from './colSpanUtils';\n\ninterface IsSelectedCellEditableOpts<R, SR> {\n  selectedPosition: Position;\n  columns: readonly CalculatedColumn<R, SR>[];\n  rows: readonly (R | GroupRow<R>)[];\n  isGroupRow: (row: R | GroupRow<R>) => row is GroupRow<R>;\n}\n\nexport function isSelectedCellEditable<R, SR>({\n  selectedPosition,\n  columns,\n  rows,\n  isGroupRow\n}: IsSelectedCellEditableOpts<R, SR>): boolean {\n  const column = columns[selectedPosition.idx];\n  const row = rows[selectedPosition.rowIdx];\n  return !isGroupRow(row) && isCellEditable(column, row);\n}\n\nexport function isCellEditable<R, SR>(column: CalculatedColumn<R, SR>, row: R): boolean {\n  return (\n    column.editor != null &&\n    !column.rowGroup &&\n    (typeof column.editable === 'function' ? column.editable(row) : column.editable) !== false\n  );\n}\n\ninterface GetNextSelectedCellPositionOpts<R, SR> {\n  cellNavigationMode: CellNavigationMode;\n  columns: readonly CalculatedColumn<R, SR>[];\n  colSpanColumns: readonly CalculatedColumn<R, SR>[];\n  rows: readonly (R | GroupRow<R>)[];\n  summaryRows: Maybe<readonly SR[]>;\n  minRowIdx: number;\n  maxRowIdx: number;\n  currentPosition: Position;\n  nextPosition: Position;\n  lastFrozenColumnIndex: number;\n  isCellWithinBounds: (position: Position) => boolean;\n  isGroupRow: (row: R | GroupRow<R>) => row is GroupRow<R>;\n}\n\nexport function getSelectedCellColSpan<R, SR>({\n  rows,\n  summaryRows,\n  rowIdx,\n  lastFrozenColumnIndex,\n  column,\n  isGroupRow\n}: Pick<\n  GetNextSelectedCellPositionOpts<R, SR>,\n  'rows' | 'summaryRows' | 'isGroupRow' | 'lastFrozenColumnIndex'\n> & {\n  rowIdx: number;\n  column: CalculatedColumn<R, SR>;\n}) {\n  if (rowIdx === -1) {\n    return getColSpan(column, lastFrozenColumnIndex, { type: 'HEADER' });\n  }\n\n  if (rowIdx >= 0 && rowIdx < rows.length) {\n    const row = rows[rowIdx];\n    if (!isGroupRow(row)) {\n      return getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row });\n    }\n    return undefined;\n  }\n\n  if (summaryRows) {\n    return getColSpan(column, lastFrozenColumnIndex, {\n      type: 'SUMMARY',\n      row: summaryRows[rowIdx - rows.length]\n    });\n  }\n\n  return undefined;\n}\n\nexport function getNextSelectedCellPosition<R, SR>({\n  cellNavigationMode,\n  columns,\n  colSpanColumns,\n  rows,\n  summaryRows,\n  minRowIdx,\n  maxRowIdx,\n  currentPosition: { idx: currentIdx },\n  nextPosition,\n  lastFrozenColumnIndex,\n  isCellWithinBounds,\n  isGroupRow\n}: GetNextSelectedCellPositionOpts<R, SR>): Position {\n  let { idx: nextIdx, rowIdx: nextRowIdx } = nextPosition;\n\n  const setColSpan = (moveRight: boolean) => {\n    if (nextRowIdx >= 0 && nextRowIdx < rows.length) {\n      const row = rows[nextRowIdx];\n      if (isGroupRow(row)) return;\n    }\n    // If a cell within the colspan range is selected then move to the\n    // previous or the next cell depending on the navigation direction\n    for (const column of colSpanColumns) {\n      const colIdx = column.idx;\n      if (colIdx > nextIdx) break;\n      const colSpan = getSelectedCellColSpan({\n        rows,\n        summaryRows,\n        rowIdx: nextRowIdx,\n        lastFrozenColumnIndex,\n        column,\n        isGroupRow\n      });\n\n      if (colSpan && nextIdx > colIdx && nextIdx < colSpan + colIdx) {\n        nextIdx = colIdx + (moveRight ? colSpan : 0);\n        break;\n      }\n    }\n  };\n\n  if (isCellWithinBounds(nextPosition)) {\n    setColSpan(nextIdx - currentIdx > 0);\n  }\n\n  if (cellNavigationMode !== 'NONE') {\n    const columnsCount = columns.length;\n    const isAfterLastColumn = nextIdx === columnsCount;\n    const isBeforeFirstColumn = nextIdx === -1;\n\n    if (isAfterLastColumn) {\n      if (cellNavigationMode === 'CHANGE_ROW') {\n        const isLastRow = nextRowIdx === maxRowIdx;\n        if (!isLastRow) {\n          nextIdx = 0;\n          nextRowIdx += 1;\n        }\n      } else {\n        nextIdx = 0;\n      }\n    } else if (isBeforeFirstColumn) {\n      if (cellNavigationMode === 'CHANGE_ROW') {\n        const isFirstRow = nextRowIdx === minRowIdx;\n        if (!isFirstRow) {\n          nextRowIdx -= 1;\n          nextIdx = columnsCount - 1;\n        }\n      } else {\n        nextIdx = columnsCount - 1;\n      }\n      setColSpan(false);\n    }\n  }\n\n  return { idx: nextIdx, rowIdx: nextRowIdx };\n}\n\ninterface CanExitGridOpts {\n  cellNavigationMode: CellNavigationMode;\n  maxColIdx: number;\n  minRowIdx: number;\n  maxRowIdx: number;\n  selectedPosition: Position;\n  shiftKey: boolean;\n}\n\nexport function canExitGrid({\n  cellNavigationMode,\n  maxColIdx,\n  minRowIdx,\n  maxRowIdx,\n  selectedPosition: { rowIdx, idx },\n  shiftKey\n}: CanExitGridOpts): boolean {\n  // When the cellNavigationMode is 'none' or 'changeRow', you can exit the grid if you're at the first or last cell of the grid\n  // When the cellNavigationMode is 'loopOverRow', there is no logical exit point so you can't exit the grid\n  if (cellNavigationMode === 'NONE' || cellNavigationMode === 'CHANGE_ROW') {\n    const atLastCellInRow = idx === maxColIdx;\n    const atFirstCellInRow = idx === 0;\n    const atLastRow = rowIdx === maxRowIdx;\n    const atFirstRow = rowIdx === minRowIdx;\n\n    return shiftKey ? atFirstCellInRow && atFirstRow : atLastCellInRow && atLastRow;\n  }\n\n  return false;\n}\n","import clsx from 'clsx';\n\nimport type { CalculatedColumn } from '../types';\nimport { cellClassname, cellFrozenClassname, cellFrozenLastClassname } from '../style';\n\nexport * from './colSpanUtils';\nexport * from './domUtils';\nexport * from './keyboardUtils';\nexport * from './selectedCellUtils';\n\nexport const { min, max, floor, sign } = Math;\n\nexport function assertIsValidKeyGetter<R, K extends React.Key>(\n  keyGetter: unknown\n): asserts keyGetter is (row: R) => K {\n  if (typeof keyGetter !== 'function') {\n    throw new Error('Please specify the rowKeyGetter prop to use selection');\n  }\n}\n\nexport function getCellStyle<R, SR>(\n  column: CalculatedColumn<R, SR>,\n  colSpan?: number\n): React.CSSProperties {\n  return {\n    gridColumnStart: column.idx + 1,\n    gridColumnEnd: colSpan !== undefined ? `span ${colSpan}` : undefined,\n    left: column.frozen ? `var(--frozen-left-${column.idx})` : undefined\n  };\n}\n\nexport function getCellClassname<R, SR>(\n  column: CalculatedColumn<R, SR>,\n  ...extraClasses: Parameters<typeof clsx>\n): string {\n  return clsx(\n    cellClassname,\n    {\n      [cellFrozenClassname]: column.frozen,\n      [cellFrozenLastClassname]: column.isLastFrozenColumn\n    },\n    ...extraClasses\n  );\n}\n","import { SelectCellFormatter } from './formatters';\nimport { useRowSelection } from './hooks/useRowSelection';\nimport type { Column, FormatterProps, GroupFormatterProps } from './types';\nimport { stopPropagation } from './utils';\n\nexport const SELECT_COLUMN_KEY = 'select-row';\n\nfunction SelectFormatter(props: FormatterProps<unknown>) {\n  const [isRowSelected, onRowSelectionChange] = useRowSelection();\n\n  return (\n    <SelectCellFormatter\n      aria-label=\"Select\"\n      isCellSelected={props.isCellSelected}\n      value={isRowSelected}\n      onClick={stopPropagation}\n      onChange={(checked, isShiftClick) => {\n        onRowSelectionChange({ row: props.row, checked, isShiftClick });\n      }}\n    />\n  );\n}\n\nfunction SelectGroupFormatter(props: GroupFormatterProps<unknown>) {\n  const [isRowSelected, onRowSelectionChange] = useRowSelection();\n\n  return (\n    <SelectCellFormatter\n      aria-label=\"Select Group\"\n      isCellSelected={props.isCellSelected}\n      value={isRowSelected}\n      onChange={(checked) => {\n        onRowSelectionChange({ row: props.row, checked, isShiftClick: false });\n      }}\n      // Stop propagation to prevent row selection\n      onClick={stopPropagation}\n    />\n  );\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const SelectColumn: Column<any, any> = {\n  key: SELECT_COLUMN_KEY,\n  name: '',\n  width: 35,\n  maxWidth: 35,\n  resizable: false,\n  sortable: false,\n  frozen: true,\n  headerRenderer(props) {\n    return (\n      <SelectCellFormatter\n        aria-label=\"Select All\"\n        isCellSelected={props.isCellSelected}\n        value={props.allRowsSelected}\n        onChange={props.onAllRowsSelectionChange}\n        // Stop propagation to prevent row selection\n        onClick={stopPropagation}\n      />\n    );\n  },\n  formatter: SelectFormatter,\n  groupFormatter: SelectGroupFormatter\n};\n","import { useMemo } from 'react';\n\nimport type { CalculatedColumn, Column, Maybe } from '../types';\nimport type { DataGridProps } from '../DataGrid';\nimport { ValueFormatter, ToggleGroupFormatter } from '../formatters';\nimport { SELECT_COLUMN_KEY } from '../Columns';\nimport { floor, max, min } from '../utils';\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\ninterface ColumnMetric {\n  width: number;\n  left: number;\n}\n\ninterface CalculatedColumnsArgs<R, SR> extends Pick<DataGridProps<R, SR>, 'defaultColumnOptions'> {\n  rawColumns: readonly Column<R, SR>[];\n  rawGroupBy: Maybe<readonly string[]>;\n  viewportWidth: number;\n  scrollLeft: number;\n  columnWidths: ReadonlyMap<string, number>;\n  enableVirtualization: boolean;\n}\n\nexport function useCalculatedColumns<R, SR>({\n  rawColumns,\n  columnWidths,\n  viewportWidth,\n  scrollLeft,\n  defaultColumnOptions,\n  rawGroupBy,\n  enableVirtualization\n}: CalculatedColumnsArgs<R, SR>) {\n  const minColumnWidth = defaultColumnOptions?.minWidth ?? 80;\n  const defaultFormatter = defaultColumnOptions?.formatter ?? ValueFormatter;\n  const defaultSortable = defaultColumnOptions?.sortable ?? false;\n  const defaultResizable = defaultColumnOptions?.resizable ?? false;\n\n  const { columns, colSpanColumns, lastFrozenColumnIndex, groupBy } = useMemo((): {\n    columns: readonly CalculatedColumn<R, SR>[];\n    colSpanColumns: readonly CalculatedColumn<R, SR>[];\n    lastFrozenColumnIndex: number;\n    groupBy: readonly string[];\n  } => {\n    // Filter rawGroupBy and ignore keys that do not match the columns prop\n    const groupBy: string[] = [];\n    let lastFrozenColumnIndex = -1;\n\n    const columns = rawColumns.map((rawColumn) => {\n      const rowGroup = rawGroupBy?.includes(rawColumn.key) ?? false;\n      // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing\n      const frozen = rowGroup || rawColumn.frozen || false;\n\n      const column: Mutable<CalculatedColumn<R, SR>> = {\n        ...rawColumn,\n        idx: 0,\n        frozen,\n        isLastFrozenColumn: false,\n        rowGroup,\n        sortable: rawColumn.sortable ?? defaultSortable,\n        resizable: rawColumn.resizable ?? defaultResizable,\n        formatter: rawColumn.formatter ?? defaultFormatter\n      };\n\n      if (rowGroup) {\n        column.groupFormatter ??= ToggleGroupFormatter;\n      }\n\n      if (frozen) {\n        lastFrozenColumnIndex++;\n      }\n\n      return column;\n    });\n\n    columns.sort(({ key: aKey, frozen: frozenA }, { key: bKey, frozen: frozenB }) => {\n      // Sort select column first:\n      if (aKey === SELECT_COLUMN_KEY) return -1;\n      if (bKey === SELECT_COLUMN_KEY) return 1;\n\n      // Sort grouped columns second, following the groupBy order:\n      if (rawGroupBy?.includes(aKey)) {\n        if (rawGroupBy.includes(bKey)) {\n          return rawGroupBy.indexOf(aKey) - rawGroupBy.indexOf(bKey);\n        }\n        return -1;\n      }\n      if (rawGroupBy?.includes(bKey)) return 1;\n\n      // Sort frozen columns third:\n      if (frozenA) {\n        if (frozenB) return 0;\n        return -1;\n      }\n      if (frozenB) return 1;\n\n      // Sort other columns last:\n      return 0;\n    });\n\n    const colSpanColumns: CalculatedColumn<R, SR>[] = [];\n    columns.forEach((column, idx) => {\n      column.idx = idx;\n\n      if (column.rowGroup) {\n        groupBy.push(column.key);\n      }\n\n      if (column.colSpan != null) {\n        colSpanColumns.push(column);\n      }\n    });\n\n    if (lastFrozenColumnIndex !== -1) {\n      columns[lastFrozenColumnIndex].isLastFrozenColumn = true;\n    }\n\n    return {\n      columns,\n      colSpanColumns,\n      lastFrozenColumnIndex,\n      groupBy\n    };\n  }, [rawColumns, defaultFormatter, defaultResizable, defaultSortable, rawGroupBy]);\n\n  const { layoutCssVars, totalColumnWidth, totalFrozenColumnWidth, columnMetrics } = useMemo((): {\n    layoutCssVars: Readonly<Record<string, string>>;\n    totalColumnWidth: number;\n    totalFrozenColumnWidth: number;\n    columnMetrics: ReadonlyMap<CalculatedColumn<R, SR>, ColumnMetric>;\n  } => {\n    const columnMetrics = new Map<CalculatedColumn<R, SR>, ColumnMetric>();\n    let left = 0;\n    let totalColumnWidth = 0;\n    let totalFrozenColumnWidth = 0;\n    let templateColumns = '';\n    let allocatedWidth = 0;\n    let unassignedColumnsCount = 0;\n\n    for (const column of columns) {\n      let width = getSpecifiedWidth(column, columnWidths, viewportWidth);\n\n      if (width === undefined) {\n        unassignedColumnsCount++;\n      } else {\n        width = clampColumnWidth(width, column, minColumnWidth);\n        allocatedWidth += width;\n        columnMetrics.set(column, { width, left: 0 });\n      }\n    }\n\n    const unallocatedWidth = viewportWidth - allocatedWidth;\n    const unallocatedColumnWidth = unallocatedWidth / unassignedColumnsCount;\n\n    for (const column of columns) {\n      let width: number;\n      if (columnMetrics.has(column)) {\n        const columnMetric = columnMetrics.get(column)!;\n        columnMetric.left = left;\n        ({ width } = columnMetric);\n      } else {\n        width = clampColumnWidth(unallocatedColumnWidth, column, minColumnWidth);\n        columnMetrics.set(column, { width, left });\n      }\n      totalColumnWidth += width;\n      left += width;\n      templateColumns += `${width}px `;\n    }\n\n    if (lastFrozenColumnIndex !== -1) {\n      const columnMetric = columnMetrics.get(columns[lastFrozenColumnIndex])!;\n      totalFrozenColumnWidth = columnMetric.left + columnMetric.width;\n    }\n\n    const layoutCssVars: Record<string, string> = {\n      '--template-columns': templateColumns\n    };\n\n    for (let i = 0; i <= lastFrozenColumnIndex; i++) {\n      const column = columns[i];\n      layoutCssVars[`--frozen-left-${column.idx}`] = `${columnMetrics.get(column)!.left}px`;\n    }\n\n    return { layoutCssVars, totalColumnWidth, totalFrozenColumnWidth, columnMetrics };\n  }, [columnWidths, columns, viewportWidth, minColumnWidth, lastFrozenColumnIndex]);\n\n  const [colOverscanStartIdx, colOverscanEndIdx] = useMemo((): [number, number] => {\n    if (!enableVirtualization) {\n      return [0, columns.length - 1];\n    }\n    // get the viewport's left side and right side positions for non-frozen columns\n    const viewportLeft = scrollLeft + totalFrozenColumnWidth;\n    const viewportRight = scrollLeft + viewportWidth;\n    // get first and last non-frozen column indexes\n    const lastColIdx = columns.length - 1;\n    const firstUnfrozenColumnIdx = min(lastFrozenColumnIndex + 1, lastColIdx);\n\n    // skip rendering non-frozen columns if the frozen columns cover the entire viewport\n    if (viewportLeft >= viewportRight) {\n      return [firstUnfrozenColumnIdx, firstUnfrozenColumnIdx];\n    }\n\n    // get the first visible non-frozen column index\n    let colVisibleStartIdx = firstUnfrozenColumnIdx;\n    while (colVisibleStartIdx < lastColIdx) {\n      const { left, width } = columnMetrics.get(columns[colVisibleStartIdx])!;\n      // if the right side of the columnn is beyond the left side of the available viewport,\n      // then it is the first column that's at least partially visible\n      if (left + width > viewportLeft) {\n        break;\n      }\n      colVisibleStartIdx++;\n    }\n\n    // get the last visible non-frozen column index\n    let colVisibleEndIdx = colVisibleStartIdx;\n    while (colVisibleEndIdx < lastColIdx) {\n      const { left, width } = columnMetrics.get(columns[colVisibleEndIdx])!;\n      // if the right side of the column is beyond or equal to the right side of the available viewport,\n      // then it the last column that's at least partially visible, as the previous column's right side is not beyond the viewport.\n      if (left + width >= viewportRight) {\n        break;\n      }\n      colVisibleEndIdx++;\n    }\n\n    const colOverscanStartIdx = max(firstUnfrozenColumnIdx, colVisibleStartIdx - 1);\n    const colOverscanEndIdx = min(lastColIdx, colVisibleEndIdx + 1);\n\n    return [colOverscanStartIdx, colOverscanEndIdx];\n  }, [\n    columnMetrics,\n    columns,\n    lastFrozenColumnIndex,\n    scrollLeft,\n    totalFrozenColumnWidth,\n    viewportWidth,\n    enableVirtualization\n  ]);\n\n  return {\n    columns,\n    colSpanColumns,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    layoutCssVars,\n    columnMetrics,\n    totalColumnWidth,\n    lastFrozenColumnIndex,\n    totalFrozenColumnWidth,\n    groupBy\n  };\n}\n\nfunction getSpecifiedWidth<R, SR>(\n  { key, width }: Column<R, SR>,\n  columnWidths: ReadonlyMap<string, number>,\n  viewportWidth: number\n): number | undefined {\n  if (columnWidths.has(key)) {\n    // Use the resized width if available\n    return columnWidths.get(key);\n  }\n  if (typeof width === 'number') {\n    return width;\n  }\n  if (typeof width === 'string' && /^\\d+%$/.test(width)) {\n    return floor((viewportWidth * parseInt(width, 10)) / 100);\n  }\n  return undefined;\n}\n\nfunction clampColumnWidth<R, SR>(\n  width: number,\n  { minWidth, maxWidth }: Column<R, SR>,\n  minColumnWidth: number\n): number {\n  width = max(width, minWidth ?? minColumnWidth);\n\n  if (typeof maxWidth === 'number') {\n    return min(width, maxWidth);\n  }\n\n  return width;\n}\n","import { useRef, useState } from 'react';\nimport { useLayoutEffect } from './useLayoutEffect';\n\nexport function useGridDimensions(): [\n  ref: React.RefObject<HTMLDivElement>,\n  width: number,\n  height: number\n] {\n  const gridRef = useRef<HTMLDivElement>(null);\n  const [gridWidth, setGridWidth] = useState(1);\n  const [gridHeight, setGridHeight] = useState(1);\n\n  useLayoutEffect(() => {\n    const { ResizeObserver } = window;\n\n    // don't break in Node.js (SSR), jest/jsdom, and browsers that don't support ResizeObserver\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    if (ResizeObserver == null) return;\n\n    const resizeObserver = new ResizeObserver(() => {\n      // Get dimensions without scrollbars.\n      // The dimensions given by the callback entries in Firefox do not substract the scrollbar sizes.\n      const { clientWidth, clientHeight } = gridRef.current!;\n      // TODO: remove once fixed upstream\n      // we reduce width by 1px here to avoid layout issues in Chrome\n      // https://bugs.chromium.org/p/chromium/issues/detail?id=1206298\n      setGridWidth(clientWidth - (devicePixelRatio % 1 === 0 ? 0 : 1));\n      setGridHeight(clientHeight);\n    });\n\n    resizeObserver.observe(gridRef.current!);\n\n    return () => {\n      resizeObserver.disconnect();\n    };\n  }, []);\n\n  return [gridRef, gridWidth, gridHeight];\n}\n","import { useRef, useEffect, useCallback } from 'react';\n\n// https://reactjs.org/docs/hooks-faq.html#what-can-i-do-if-my-effect-dependencies-change-too-often\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function useLatestFunc<T extends (...args: any[]) => any>(fn: T) {\n  const ref = useRef(fn);\n\n  useEffect(() => {\n    ref.current = fn;\n  });\n\n  return useCallback((...args: Parameters<T>) => {\n    ref.current(...args);\n  }, []);\n}\n","import { useRef, useState } from 'react';\nimport { useLayoutEffect } from './useLayoutEffect';\n\n// https://www.w3.org/TR/wai-aria-practices-1.1/#kbd_roving_tabindex\nexport function useRovingCellRef(isSelected: boolean) {\n  const ref = useRef<HTMLDivElement>(null);\n  // https://www.w3.org/TR/wai-aria-practices-1.1/#gridNav_focus\n  const isChildFocused = useRef(false);\n  const [, forceRender] = useState<unknown>({});\n\n  useLayoutEffect(() => {\n    if (!isSelected) {\n      isChildFocused.current = false;\n      return;\n    }\n\n    if (isChildFocused.current) {\n      // When the child is focused, we need to rerender\n      // the cell again so tabIndex is updated to -1\n      forceRender({});\n      return;\n    }\n    ref.current?.focus({ preventScroll: true });\n  }, [isSelected]);\n\n  function onFocus(event: React.FocusEvent<HTMLDivElement>) {\n    if (event.target !== ref.current) {\n      isChildFocused.current = true;\n    }\n  }\n\n  const isFocused = isSelected && !isChildFocused.current;\n\n  return {\n    ref,\n    tabIndex: isFocused ? 0 : -1,\n    onFocus\n  };\n}\n","import { css } from '@linaria/core';\n\nimport { cell } from '../style';\nimport { useFocusRef } from './useFocusRef';\n\nconst rowSelected = css`\n  outline: none;\n\n  &::after {\n    content: '';\n    position: absolute;\n    inset: 0;\n    box-shadow: inset 0 0 0 2px var(--selection-color);\n    pointer-events: none;\n    z-index: 2;\n  }\n\n  > .${cell}:first-child {\n    /* preserve left border on the first frozen cell after scrolling to the right */\n    box-shadow: inset 2px 0 0 0 var(--selection-color);\n  }\n`;\n\nexport const rowSelectedClassname = `rdg-row-selected ${rowSelected}`;\n\nexport function useRovingRowRef(selectedCellIdx: number | undefined) {\n  const isSelected = selectedCellIdx === -1;\n  const { ref, tabIndex } = useFocusRef<HTMLDivElement>(isSelected);\n\n  return {\n    ref,\n    tabIndex,\n    className: isSelected ? rowSelectedClassname : undefined\n  };\n}\n","import { useMemo } from 'react';\n\nimport { getColSpan } from '../utils';\nimport type { CalculatedColumn, GroupRow, Maybe } from '../types';\n\ninterface ViewportColumnsArgs<R, SR> {\n  columns: readonly CalculatedColumn<R, SR>[];\n  colSpanColumns: readonly CalculatedColumn<R, SR>[];\n  rows: readonly (R | GroupRow<R>)[];\n  summaryRows: Maybe<readonly SR[]>;\n  colOverscanStartIdx: number;\n  colOverscanEndIdx: number;\n  lastFrozenColumnIndex: number;\n  rowOverscanStartIdx: number;\n  rowOverscanEndIdx: number;\n  isGroupRow: (row: R | GroupRow<R>) => row is GroupRow<R>;\n}\n\nexport function useViewportColumns<R, SR>({\n  columns,\n  colSpanColumns,\n  rows,\n  summaryRows,\n  colOverscanStartIdx,\n  colOverscanEndIdx,\n  lastFrozenColumnIndex,\n  rowOverscanStartIdx,\n  rowOverscanEndIdx,\n  isGroupRow\n}: ViewportColumnsArgs<R, SR>) {\n  // find the column that spans over a column within the visible columns range and adjust colOverscanStartIdx\n  const startIdx = useMemo(() => {\n    if (colOverscanStartIdx === 0) return 0;\n\n    let startIdx = colOverscanStartIdx;\n\n    const updateStartIdx = (colIdx: number, colSpan: number | undefined) => {\n      if (colSpan !== undefined && colIdx + colSpan > colOverscanStartIdx) {\n        startIdx = colIdx;\n        return true;\n      }\n      return false;\n    };\n\n    for (const column of colSpanColumns) {\n      // check header row\n      const colIdx = column.idx;\n      if (colIdx >= startIdx) break;\n      if (updateStartIdx(colIdx, getColSpan(column, lastFrozenColumnIndex, { type: 'HEADER' }))) {\n        break;\n      }\n\n      // check viewport rows\n      for (let rowIdx = rowOverscanStartIdx; rowIdx <= rowOverscanEndIdx; rowIdx++) {\n        const row = rows[rowIdx];\n        if (isGroupRow(row)) continue;\n        if (\n          updateStartIdx(colIdx, getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row }))\n        ) {\n          break;\n        }\n      }\n\n      // check summary rows\n      if (summaryRows != null) {\n        for (const row of summaryRows) {\n          if (\n            updateStartIdx(\n              colIdx,\n              getColSpan(column, lastFrozenColumnIndex, { type: 'SUMMARY', row })\n            )\n          ) {\n            break;\n          }\n        }\n      }\n    }\n\n    return startIdx;\n  }, [\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    summaryRows,\n    colOverscanStartIdx,\n    lastFrozenColumnIndex,\n    colSpanColumns,\n    isGroupRow\n  ]);\n\n  return useMemo((): readonly CalculatedColumn<R, SR>[] => {\n    const viewportColumns: CalculatedColumn<R, SR>[] = [];\n    for (let colIdx = 0; colIdx <= colOverscanEndIdx; colIdx++) {\n      const column = columns[colIdx];\n\n      if (colIdx < startIdx && !column.frozen) continue;\n      viewportColumns.push(column);\n    }\n\n    return viewportColumns;\n  }, [startIdx, colOverscanEndIdx, columns]);\n}\n","import { useMemo } from 'react';\nimport { floor, max, min } from '../utils';\nimport type { GroupRow, Maybe, RowHeightArgs } from '../types';\n\ntype GroupByDictionary<TRow> = Record<\n  string,\n  {\n    readonly childRows: readonly TRow[];\n    readonly childGroups: readonly TRow[] | Readonly<GroupByDictionary<TRow>>;\n    readonly startRowIndex: number;\n  }\n>;\n\ninterface ViewportRowsArgs<R> {\n  rawRows: readonly R[];\n  rowHeight: number | ((args: RowHeightArgs<R>) => number);\n  clientHeight: number;\n  scrollTop: number;\n  groupBy: readonly string[];\n  rowGrouper: Maybe<(rows: readonly R[], columnKey: string) => Record<string, readonly R[]>>;\n  expandedGroupIds: Maybe<ReadonlySet<unknown>>;\n  enableVirtualization: boolean;\n}\n\n// TODO: https://github.com/microsoft/TypeScript/issues/41808\nfunction isReadonlyArray(arr: unknown): arr is readonly unknown[] {\n  return Array.isArray(arr);\n}\n\nexport function useViewportRows<R>({\n  rawRows,\n  rowHeight,\n  clientHeight,\n  scrollTop,\n  groupBy,\n  rowGrouper,\n  expandedGroupIds,\n  enableVirtualization\n}: ViewportRowsArgs<R>) {\n  const [groupedRows, rowsCount] = useMemo(() => {\n    if (groupBy.length === 0 || rowGrouper == null) return [undefined, rawRows.length];\n\n    const groupRows = (\n      rows: readonly R[],\n      [groupByKey, ...remainingGroupByKeys]: readonly string[],\n      startRowIndex: number\n    ): [Readonly<GroupByDictionary<R>>, number] => {\n      let groupRowsCount = 0;\n      const groups: GroupByDictionary<R> = {};\n      for (const [key, childRows] of Object.entries(rowGrouper(rows, groupByKey))) {\n        // Recursively group each parent group\n        const [childGroups, childRowsCount] =\n          remainingGroupByKeys.length === 0\n            ? [childRows, childRows.length]\n            : groupRows(childRows, remainingGroupByKeys, startRowIndex + groupRowsCount + 1); // 1 for parent row\n        groups[key] = { childRows, childGroups, startRowIndex: startRowIndex + groupRowsCount };\n        groupRowsCount += childRowsCount + 1; // 1 for parent row\n      }\n\n      return [groups, groupRowsCount];\n    };\n\n    return groupRows(rawRows, groupBy, 0);\n  }, [groupBy, rowGrouper, rawRows]);\n\n  const [rows, isGroupRow] = useMemo((): [\n    ReadonlyArray<R | GroupRow<R>>,\n    (row: R | GroupRow<R>) => row is GroupRow<R>\n  ] => {\n    const allGroupRows = new Set<unknown>();\n    if (!groupedRows) return [rawRows, isGroupRow];\n\n    const flattenedRows: Array<R | GroupRow<R>> = [];\n    const expandGroup = (\n      rows: GroupByDictionary<R> | readonly R[],\n      parentId: string | undefined,\n      level: number\n    ): void => {\n      if (isReadonlyArray(rows)) {\n        flattenedRows.push(...rows);\n        return;\n      }\n      Object.keys(rows).forEach((groupKey, posInSet, keys) => {\n        // TODO: should users have control over the generated key?\n        const id = parentId !== undefined ? `${parentId}__${groupKey}` : groupKey;\n        const isExpanded = expandedGroupIds?.has(id) ?? false;\n        const { childRows, childGroups, startRowIndex } = rows[groupKey];\n\n        const groupRow: GroupRow<R> = {\n          id,\n          parentId,\n          groupKey,\n          isExpanded,\n          childRows,\n          level,\n          posInSet,\n          startRowIndex,\n          setSize: keys.length\n        };\n        flattenedRows.push(groupRow);\n        allGroupRows.add(groupRow);\n\n        if (isExpanded) {\n          expandGroup(childGroups, id, level + 1);\n        }\n      });\n    };\n\n    expandGroup(groupedRows, undefined, 0);\n    return [flattenedRows, isGroupRow];\n\n    function isGroupRow(row: R | GroupRow<R>): row is GroupRow<R> {\n      return allGroupRows.has(row);\n    }\n  }, [expandedGroupIds, groupedRows, rawRows]);\n\n  const stickyRowIndexes = useMemo(() => {\n    const stickyRowInfo: number[] = []\n    rows.forEach((r, i) => {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      if (typeof r === 'object' && (r as any).isStickyRow) {\n        stickyRowInfo.push(i)\n      }\n    })\n\n    return stickyRowInfo\n  }, [rows])\n\n  const { totalRowHeight, getRowTop, getRowHeight, findRowIdx } = useMemo(() => {\n    if (typeof rowHeight === 'number') {\n      return {\n        totalRowHeight: rowHeight * rows.length,\n        getRowTop: (rowIdx: number) => rowIdx * rowHeight,\n        getRowHeight: () => rowHeight,\n        findRowIdx: (offset: number) => floor(offset / rowHeight)\n      };\n    }\n\n    let totalRowHeight = 0;\n    // Calcule the height of all the rows upfront. This can cause performance issues\n    // and we can consider using a similar approach as react-window\n    // https://github.com/bvaughn/react-window/blob/b0a470cc264e9100afcaa1b78ed59d88f7914ad4/src/VariableSizeList.js#L68\n    const rowPositions = rows.map((row: R | GroupRow<R>) => {\n      const currentRowHeight = isGroupRow(row)\n        ? rowHeight({ type: 'GROUP', row })\n        : rowHeight({ type: 'ROW', row });\n      const position = { top: totalRowHeight, height: currentRowHeight };\n      totalRowHeight += currentRowHeight;\n      return position;\n    });\n\n    const validateRowIdx = (rowIdx: number) => {\n      return max(0, min(rows.length - 1, rowIdx));\n    };\n\n    return {\n      totalRowHeight,\n      getRowTop: (rowIdx: number) => rowPositions[validateRowIdx(rowIdx)].top,\n      getRowHeight: (rowIdx: number) => rowPositions[validateRowIdx(rowIdx)].height,\n      findRowIdx(offset: number) {\n        let start = 0;\n        let end = rowPositions.length - 1;\n        while (start <= end) {\n          const middle = start + floor((end - start) / 2);\n          const currentOffset = rowPositions[middle].top;\n\n          if (currentOffset === offset) return middle;\n\n          if (currentOffset < offset) {\n            start = middle + 1;\n          } else if (currentOffset > offset) {\n            end = middle - 1;\n          }\n\n          if (start > end) return end;\n        }\n        return 0;\n      }\n    };\n  }, [isGroupRow, rowHeight, rows]);\n\n  const stickyRowIndex = useMemo(() => {\n    if (!stickyRowIndexes.length) {\n      return undefined\n    }\n\n    const rowVisibleStartIdx = findRowIdx(scrollTop);\n    for (const [i, rowIndex] of stickyRowIndexes.entries()) {\n      if (rowIndex === rowVisibleStartIdx) {\n        return i\n      }\n\n      if (stickyRowIndexes[i] > rowVisibleStartIdx) {\n        return i === 0 ? i : i - 1\n      }\n    }\n\n    return stickyRowIndexes.length - 1\n  }, [stickyRowIndexes, findRowIdx, scrollTop])\n\n  let rowOverscanStartIdx = 0;\n  let rowOverscanEndIdx = rows.length - 1;\n\n  if (enableVirtualization) {\n    const overscanThreshold = 4;\n    const rowVisibleStartIdx = findRowIdx(scrollTop);\n    const rowVisibleEndIdx = findRowIdx(scrollTop + clientHeight);\n    rowOverscanStartIdx = max(0, rowVisibleStartIdx - overscanThreshold);\n    rowOverscanEndIdx = min(rows.length - 1, rowVisibleEndIdx + overscanThreshold);\n  }\n\n  return {\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    rowsCount,\n    totalRowHeight,\n    isGroupRow,\n    getRowTop,\n    getRowHeight,\n    findRowIdx,\n    stickyRowIndexes,\n    stickyRowIndex\n  };\n}\n","import { css } from '@linaria/core';\nimport { useFocusRef } from '../hooks';\nimport type { HeaderRendererProps } from '../types';\n\nconst headerSortCell = css`\n  cursor: pointer;\n  display: flex;\n\n  &:focus {\n    outline: none;\n  }\n`;\n\nconst headerSortCellClassname = `rdg-header-sort-cell ${headerSortCell}`;\n\nconst headerSortName = css`\n  flex-grow: 1;\n  overflow: hidden;\n  overflow: clip;\n  text-overflow: ellipsis;\n`;\n\nconst headerSortNameClassname = `rdg-header-sort-name ${headerSortName}`;\n\nconst arrow = css`\n  fill: currentColor;\n\n  > path {\n    transition: d 0.1s;\n  }\n`;\n\nconst arrowClassname = `rdg-sort-arrow ${arrow}`;\n\ntype SharedHeaderCellProps<R, SR> = Pick<\n  HeaderRendererProps<R, SR>,\n  'sortDirection' | 'onSort' | 'priority' | 'isCellSelected'\n>;\n\ninterface Props<R, SR> extends SharedHeaderCellProps<R, SR> {\n  children: React.ReactNode;\n}\n\nexport default function SortableHeaderCell<R, SR>({\n  onSort,\n  sortDirection,\n  priority,\n  children,\n  isCellSelected\n}: Props<R, SR>) {\n  const { ref, tabIndex } = useFocusRef<HTMLSpanElement>(isCellSelected);\n\n  function handleKeyDown(event: React.KeyboardEvent<HTMLSpanElement>) {\n    if (event.key === ' ' || event.key === 'Enter') {\n      // stop propagation to prevent scrolling\n      event.preventDefault();\n      onSort(event.ctrlKey || event.metaKey);\n    }\n  }\n\n  function handleClick(event: React.MouseEvent<HTMLSpanElement>) {\n    onSort(event.ctrlKey || event.metaKey);\n  }\n\n  return (\n    <span\n      ref={ref}\n      tabIndex={tabIndex}\n      className={headerSortCellClassname}\n      onClick={handleClick}\n      onKeyDown={handleKeyDown}\n    >\n      <span className={headerSortNameClassname}>{children}</span>\n      <span>\n        {sortDirection !== undefined && (\n          <svg viewBox=\"0 0 12 8\" width=\"12\" height=\"8\" className={arrowClassname} aria-hidden>\n            <path d={sortDirection === 'ASC' ? 'M0 8 6 0 12 8' : 'M0 0 6 8 12 0'} />\n          </svg>\n        )}\n        {priority}\n      </span>\n    </span>\n  );\n}\n","import { css } from '@linaria/core';\n\nimport type { CalculatedColumn, SortColumn } from './types';\nimport type { HeaderRowProps } from './HeaderRow';\nimport SortableHeaderCell from './headerCells/SortableHeaderCell';\nimport { getCellStyle, getCellClassname } from './utils';\nimport { useRovingCellRef } from './hooks';\n\nconst cellResizable = css`\n  touch-action: none;\n\n  &::after {\n    content: '';\n    cursor: col-resize;\n    position: absolute;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    width: 10px;\n  }\n`;\n\nconst cellResizableClassname = `rdg-cell-resizable ${cellResizable}`;\n\ntype SharedHeaderRowProps<R, SR> = Pick<\n  HeaderRowProps<R, SR, React.Key>,\n  | 'sortColumns'\n  | 'onSortColumnsChange'\n  | 'allRowsSelected'\n  | 'onAllRowsSelectionChange'\n  | 'selectCell'\n  | 'onColumnResize'\n  | 'shouldFocusGrid'\n>;\n\nexport interface HeaderCellProps<R, SR> extends SharedHeaderRowProps<R, SR> {\n  column: CalculatedColumn<R, SR>;\n  colSpan: number | undefined;\n  isCellSelected: boolean;\n}\n\nexport default function HeaderCell<R, SR>({\n  column,\n  colSpan,\n  isCellSelected,\n  onColumnResize,\n  allRowsSelected,\n  onAllRowsSelectionChange,\n  sortColumns,\n  onSortColumnsChange,\n  selectCell,\n  shouldFocusGrid\n}: HeaderCellProps<R, SR>) {\n  const sortIndex = sortColumns?.findIndex((sort) => sort.columnKey === column.key);\n  const sortColumn =\n    sortIndex !== undefined && sortIndex > -1 ? sortColumns![sortIndex] : undefined;\n  const sortDirection = sortColumn?.direction;\n  const priority = sortColumn !== undefined && sortColumns!.length > 1 ? sortIndex! + 1 : undefined;\n  const ariaSort =\n    sortDirection && !priority ? (sortDirection === 'ASC' ? 'ascending' : 'descending') : undefined;\n\n  const className = getCellClassname(column, column.headerCellClass, {\n    [cellResizableClassname]: column.resizable\n  });\n\n  function onPointerDown(event: React.PointerEvent<HTMLDivElement>) {\n    if (event.pointerType === 'mouse' && event.buttons !== 1) {\n      return;\n    }\n\n    const { currentTarget, pointerId } = event;\n    const { right } = currentTarget.getBoundingClientRect();\n    const offset = right - event.clientX;\n\n    if (offset > 11) {\n      // +1px to account for the border size\n      return;\n    }\n\n    function onPointerMove(event: PointerEvent) {\n      const width = event.clientX + offset - currentTarget.getBoundingClientRect().left;\n      if (width > 0) {\n        onColumnResize(column, width);\n      }\n    }\n\n    function onLostPointerCapture() {\n      currentTarget.removeEventListener('pointermove', onPointerMove);\n      currentTarget.removeEventListener('lostpointercapture', onLostPointerCapture);\n    }\n\n    currentTarget.setPointerCapture(pointerId);\n    currentTarget.addEventListener('pointermove', onPointerMove);\n    currentTarget.addEventListener('lostpointercapture', onLostPointerCapture);\n  }\n\n  function onSort(ctrlClick: boolean) {\n    if (onSortColumnsChange == null) return;\n    const { sortDescendingFirst } = column;\n    if (sortColumn === undefined) {\n      // not currently sorted\n      const nextSort: SortColumn = {\n        columnKey: column.key,\n        direction: sortDescendingFirst ? 'DESC' : 'ASC'\n      };\n      onSortColumnsChange(sortColumns && ctrlClick ? [...sortColumns, nextSort] : [nextSort]);\n    } else {\n      let nextSortColumn: SortColumn | undefined;\n      if (\n        (sortDescendingFirst && sortDirection === 'DESC') ||\n        (!sortDescendingFirst && sortDirection === 'ASC')\n      ) {\n        nextSortColumn = {\n          columnKey: column.key,\n          direction: sortDirection === 'ASC' ? 'DESC' : 'ASC'\n        };\n      }\n      if (ctrlClick) {\n        const nextSortColumns = [...sortColumns!];\n        if (nextSortColumn) {\n          // swap direction\n          nextSortColumns[sortIndex!] = nextSortColumn;\n        } else {\n          // remove sort\n          nextSortColumns.splice(sortIndex!, 1);\n        }\n        onSortColumnsChange(nextSortColumns);\n      } else {\n        onSortColumnsChange(nextSortColumn ? [nextSortColumn] : []);\n      }\n    }\n  }\n\n  function onClick() {\n    selectCell(column.idx);\n  }\n\n  function getCell() {\n    if (column.headerRenderer) {\n      return (\n        <column.headerRenderer\n          column={column}\n          sortDirection={sortDirection}\n          priority={priority}\n          onSort={onSort}\n          allRowsSelected={allRowsSelected}\n          onAllRowsSelectionChange={onAllRowsSelectionChange}\n          isCellSelected={isCellSelected}\n        />\n      );\n    }\n\n    if (column.sortable) {\n      return (\n        <SortableHeaderCell\n          onSort={onSort}\n          sortDirection={sortDirection}\n          priority={priority}\n          isCellSelected={isCellSelected}\n        >\n          {column.name}\n        </SortableHeaderCell>\n      );\n    }\n\n    return column.name;\n  }\n\n  return (\n    <div\n      role=\"columnheader\"\n      aria-colindex={column.idx + 1}\n      aria-sort={ariaSort}\n      aria-colspan={colSpan}\n      className={className}\n      style={getCellStyle(column, colSpan)}\n      onClick={onClick}\n      onPointerDown={column.resizable ? onPointerDown : undefined}\n    >\n      {getCell()}\n    </div>\n  );\n}\n","import { memo } from 'react';\nimport clsx from 'clsx';\nimport { css } from '@linaria/core';\n\nimport HeaderCell from './HeaderCell';\nimport type { CalculatedColumn } from './types';\nimport { getColSpan } from './utils';\nimport type { DataGridProps } from './DataGrid';\n\ntype SharedDataGridProps<R, SR, K extends React.Key> = Pick<\n  DataGridProps<R, SR, K>,\n  'sortColumns' | 'onSortColumnsChange'\n>;\n\nexport interface HeaderRowProps<R, SR, K extends React.Key> extends SharedDataGridProps<R, SR, K> {\n  columns: readonly CalculatedColumn<R, SR>[];\n  allRowsSelected: boolean;\n  onAllRowsSelectionChange: (checked: boolean) => void;\n  onColumnResize: (column: CalculatedColumn<R, SR>, width: number) => void;\n  selectCell: (columnIdx: number) => void;\n  lastFrozenColumnIndex: number;\n  selectedCellIdx: number | undefined;\n  shouldFocusGrid: boolean;\n}\n\nconst headerRow = css`\n  contain: strict;\n  contain: size layout style paint;\n  display: grid;\n  grid-template-columns: var(--template-columns);\n  grid-template-rows: var(--header-row-height);\n  height: var(--header-row-height); /* needed on Firefox */\n  line-height: var(--header-row-height);\n  width: var(--row-width);\n  position: sticky;\n  top: 0;\n  background-color: var(--header-background-color);\n  font-weight: bold;\n  z-index: 3;\n  outline: none;\n\n  &[aria-selected='true'] {\n    box-shadow: inset 0 0 0 2px var(--selection-color);\n  }\n`;\n\nconst headerRowClassname = `rdg-header-row ${headerRow}`;\n\nfunction HeaderRow<R, SR, K extends React.Key>({\n  columns,\n  allRowsSelected,\n  onAllRowsSelectionChange,\n  onColumnResize,\n  sortColumns,\n  onSortColumnsChange,\n  lastFrozenColumnIndex,\n  selectedCellIdx,\n  selectCell,\n  shouldFocusGrid\n}: HeaderRowProps<R, SR, K>) {\n  const cells = [];\n  for (let index = 0; index < columns.length; index++) {\n    const column = columns[index];\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'HEADER' });\n    if (colSpan !== undefined) {\n      index += colSpan - 1;\n    }\n\n    cells.push(\n      <HeaderCell<R, SR>\n        key={column.key}\n        column={column}\n        colSpan={colSpan}\n        isCellSelected={selectedCellIdx === column.idx}\n        onColumnResize={onColumnResize}\n        allRowsSelected={allRowsSelected}\n        onAllRowsSelectionChange={onAllRowsSelectionChange}\n        onSortColumnsChange={onSortColumnsChange}\n        sortColumns={sortColumns}\n        selectCell={selectCell}\n        shouldFocusGrid={shouldFocusGrid && index === 0}\n      />\n    );\n  }\n\n  return (\n    <div\n      role=\"row\"\n      aria-rowindex={1} // aria-rowindex is 1 based\n      className={clsx(headerRowClassname)}\n    >\n      {cells}\n    </div>\n  );\n}\n\nexport default memo(HeaderRow) as <R, SR, K extends React.Key>(\n  props: HeaderRowProps<R, SR, K>\n) => JSX.Element;\n","import { memo } from 'react';\nimport { css } from '@linaria/core';\n\nimport { getCellStyle, getCellClassname, isCellEditable } from './utils';\nimport type { CellRendererProps } from './types';\n\nconst cellCopied = css`\n  background-color: #ccccff;\n`;\n\nconst cellCopiedClassname = `rdg-cell-copied ${cellCopied}`;\n\nconst cellDraggedOver = css`\n  background-color: #ccccff;\n\n  &.${cellCopied} {\n    background-color: #9999ff;\n  }\n`;\n\nconst cellDraggedOverClassname = `rdg-cell-dragged-over ${cellDraggedOver}`;\n\nfunction Cell<R, SR>({\n  column,\n  colSpan,\n  isCellSelected,\n  isCopied,\n  isDraggedOver,\n  row,\n  dragHandle,\n  onRowClick,\n  onRowDoubleClick,\n  onRowChange,\n  selectCell,\n  ...props\n}: CellRendererProps<R, SR>) {\n  const { cellClass } = column;\n  const className = getCellClassname(\n    column,\n    {\n      [cellCopiedClassname]: isCopied,\n      [cellDraggedOverClassname]: isDraggedOver\n    },\n    typeof cellClass === 'function' ? cellClass(row) : cellClass\n  );\n\n  function selectCellWrapper(openEditor?: boolean | null) {\n    selectCell(row, column, openEditor);\n  }\n\n  function handleClick() {\n    selectCellWrapper(column.editorOptions?.editOnClick);\n    onRowClick?.(row, column);\n  }\n\n  function handleContextMenu() {\n    selectCellWrapper();\n  }\n\n  function handleDoubleClick() {\n    selectCellWrapper(true);\n    onRowDoubleClick?.(row, column);\n  }\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1} // aria-colindex is 1-based\n      aria-colspan={colSpan}\n      aria-readonly={!isCellEditable(column, row) || undefined}\n      className={className}\n      style={getCellStyle(column, colSpan)}\n      onClick={handleClick}\n      onDoubleClick={handleDoubleClick}\n      onContextMenu={handleContextMenu}\n      {...props}\n    >\n      {!column.rowGroup && (\n        <>\n          <column.formatter\n            column={column}\n            row={row}\n            isCellSelected={isCellSelected}\n            onRowChange={onRowChange}\n          />\n          {dragHandle}\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default memo(Cell) as <R, SR>(props: CellRendererProps<R, SR>) => JSX.Element;\n","import { memo, forwardRef } from 'react';\nimport type { RefAttributes, CSSProperties } from 'react';\nimport clsx from 'clsx';\n\nimport Cell from './Cell';\nimport { RowSelectionProvider, useLatestFunc } from './hooks';\nimport { getColSpan } from './utils';\nimport { rowClassname } from './style';\nimport type { RowRendererProps } from './types';\n\nfunction Row<R, SR>(\n  {\n    className,\n    rowIdx,\n    selectedCellIdx,\n    isRowSelected,\n    copiedCellIdx,\n    draggedOverCellIdx,\n    lastFrozenColumnIndex,\n    row,\n    viewportColumns,\n    selectedCellEditor,\n    selectedCellDragHandle,\n    onRowClick,\n    onRowDoubleClick,\n    rowClass,\n    setDraggedOverRowIdx,\n    onMouseEnter,\n    top,\n    height,\n    zIndex,\n    onRowChange,\n    selectCell,\n    ...props\n  }: RowRendererProps<R, SR>,\n  ref: React.Ref<HTMLDivElement>\n) {\n  const handleRowChange = useLatestFunc((newRow: R) => {\n    onRowChange(rowIdx, newRow);\n  });\n\n  function handleDragEnter(event: React.MouseEvent<HTMLDivElement>) {\n    setDraggedOverRowIdx?.(rowIdx);\n    onMouseEnter?.(event);\n  }\n\n  className = clsx(\n    rowClassname,\n    `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`,\n    rowClass?.(row),\n    className\n  );\n\n  const cells = [];\n\n  for (let index = 0; index < viewportColumns.length; index++) {\n    const column = viewportColumns[index];\n    const { idx } = column;\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row });\n    if (colSpan !== undefined) {\n      index += colSpan - 1;\n    }\n\n    const isCellSelected = selectedCellIdx === idx;\n\n    if (isCellSelected && selectedCellEditor) {\n      cells.push(selectedCellEditor);\n    } else {\n      cells.push(\n        <Cell\n          key={column.key}\n          column={column}\n          colSpan={colSpan}\n          row={row}\n          isCopied={copiedCellIdx === idx}\n          isDraggedOver={draggedOverCellIdx === idx}\n          isCellSelected={isCellSelected}\n          dragHandle={isCellSelected ? selectedCellDragHandle : undefined}\n          onRowClick={onRowClick}\n          onRowDoubleClick={onRowDoubleClick}\n          onRowChange={handleRowChange}\n          selectCell={selectCell}\n        />\n      );\n    }\n  }\n\n  return (\n    <RowSelectionProvider value={isRowSelected}>\n      <div\n        role=\"row\"\n        ref={ref}\n        className={className}\n        onMouseEnter={handleDragEnter}\n        style={\n          {\n            top,\n            '--row-height': `${height}px`,\n            zIndex\n          } as unknown as CSSProperties\n        }\n        {...props}\n      >\n        {cells}\n      </div>\n    </RowSelectionProvider>\n  );\n}\n\nexport default memo(Row) as <R, SR>(props: RowRendererProps<R, SR>) => JSX.Element;\n\nexport const RowWithRef = memo(forwardRef(Row)) as <R, SR>(\n  props: RowRendererProps<R, SR> & RefAttributes<HTMLDivElement>\n) => JSX.Element;\n","import { memo } from 'react';\n\nimport { getCellStyle, getCellClassname } from './utils';\nimport type { CalculatedColumn, GroupRow } from './types';\nimport type { GroupRowRendererProps } from './GroupRow';\nimport { useRovingCellRef } from './hooks';\n\ntype SharedGroupRowRendererProps<R, SR> = Pick<\n  GroupRowRendererProps<R, SR>,\n  'id' | 'groupKey' | 'childRows' | 'isExpanded' | 'toggleGroup'\n>;\n\ninterface GroupCellProps<R, SR> extends SharedGroupRowRendererProps<R, SR> {\n  column: CalculatedColumn<R, SR>;\n  row: GroupRow<R>;\n  isCellSelected: boolean;\n  groupColumnIndex: number;\n}\n\nfunction GroupCell<R, SR>({\n  id,\n  groupKey,\n  childRows,\n  isExpanded,\n  isCellSelected,\n  column,\n  row,\n  groupColumnIndex,\n  toggleGroup: toggleGroupWrapper\n}: GroupCellProps<R, SR>) {\n  const { ref, tabIndex, onFocus } = useRovingCellRef(isCellSelected);\n\n  function toggleGroup() {\n    toggleGroupWrapper(id);\n  }\n\n  // Only make the cell clickable if the group level matches\n  const isLevelMatching = column.rowGroup && groupColumnIndex === column.idx;\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1}\n      aria-selected={isCellSelected}\n      ref={ref}\n      tabIndex={tabIndex}\n      key={column.key}\n      className={getCellClassname(column)}\n      style={{\n        ...getCellStyle(column),\n        cursor: isLevelMatching ? 'pointer' : 'default'\n      }}\n      onClick={isLevelMatching ? toggleGroup : undefined}\n      onFocus={onFocus}\n    >\n      {(!column.rowGroup || groupColumnIndex === column.idx) && column.groupFormatter && (\n        <column.groupFormatter\n          groupKey={groupKey}\n          childRows={childRows}\n          column={column}\n          row={row}\n          isExpanded={isExpanded}\n          isCellSelected={isCellSelected}\n          toggleGroup={toggleGroup}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default memo(GroupCell) as <R, SR>(props: GroupCellProps<R, SR>) => JSX.Element;\n","import type { CSSProperties } from 'react';\nimport { memo } from 'react';\nimport clsx from 'clsx';\nimport { css } from '@linaria/core';\n\nimport { cell, cellFrozenLast, rowClassname } from './style';\nimport { SELECT_COLUMN_KEY } from './Columns';\nimport GroupCell from './GroupCell';\nimport type { CalculatedColumn, GroupRow, Omit } from './types';\nimport { RowSelectionProvider, useRovingRowRef } from './hooks';\n\nexport interface GroupRowRendererProps<R, SR>\n  extends Omit<React.HTMLAttributes<HTMLDivElement>, 'style' | 'children'> {\n  id: string;\n  groupKey: unknown;\n  viewportColumns: readonly CalculatedColumn<R, SR>[];\n  childRows: readonly R[];\n  rowIdx: number;\n  row: GroupRow<R>;\n  top: number;\n  height: number;\n  level: number;\n  selectedCellIdx: number | undefined;\n  isExpanded: boolean;\n  isRowSelected: boolean;\n  selectGroup: (rowIdx: number) => void;\n  toggleGroup: (expandedGroupId: unknown) => void;\n}\n\nconst groupRow = css`\n  &:not([aria-selected='true']) {\n    background-color: var(--header-background-color);\n  }\n\n  > .${cell}:not(:last-child):not(.${cellFrozenLast}) {\n    border-right: none;\n  }\n`;\n\nconst groupRowClassname = `rdg-group-row ${groupRow}`;\n\nfunction GroupedRow<R, SR>({\n  id,\n  groupKey,\n  viewportColumns,\n  childRows,\n  rowIdx,\n  row,\n  top,\n  height,\n  level,\n  isExpanded,\n  selectedCellIdx,\n  isRowSelected,\n  selectGroup,\n  toggleGroup,\n  ...props\n}: GroupRowRendererProps<R, SR>) {\n  const { ref, tabIndex, className } = useRovingRowRef(selectedCellIdx);\n\n  // Select is always the first column\n  const idx = viewportColumns[0].key === SELECT_COLUMN_KEY ? level + 1 : level;\n\n  function handleSelectGroup() {\n    selectGroup(rowIdx);\n  }\n\n  return (\n    <RowSelectionProvider value={isRowSelected}>\n      <div\n        role=\"row\"\n        aria-level={level}\n        aria-expanded={isExpanded}\n        ref={ref}\n        tabIndex={tabIndex}\n        className={clsx(\n          rowClassname,\n          groupRowClassname,\n          `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`,\n          className\n        )}\n        onClick={handleSelectGroup}\n        style={\n          {\n            top,\n            '--row-height': `${height}px`\n          } as unknown as CSSProperties\n        }\n        {...props}\n      >\n        {viewportColumns.map((column) => (\n          <GroupCell\n            key={column.key}\n            id={id}\n            groupKey={groupKey}\n            childRows={childRows}\n            isExpanded={isExpanded}\n            isCellSelected={selectedCellIdx === column.idx}\n            column={column}\n            row={row}\n            groupColumnIndex={idx}\n            toggleGroup={toggleGroup}\n          />\n        ))}\n      </div>\n    </RowSelectionProvider>\n  );\n}\n\nexport default memo(GroupedRow) as <R, SR>(props: GroupRowRendererProps<R, SR>) => JSX.Element;\n","import { memo } from 'react';\n\nimport { getCellStyle, getCellClassname } from './utils';\nimport type { CalculatedColumn, CellRendererProps } from './types';\nimport { useRovingCellRef } from './hooks';\n\ninterface SharedCellRendererProps<R, SR>\n  extends Pick<CellRendererProps<R, SR>, 'column' | 'colSpan' | 'isCellSelected'> {\n  selectCell: (row: SR, column: CalculatedColumn<R, SR>) => void;\n}\n\ninterface SummaryCellProps<R, SR> extends SharedCellRendererProps<R, SR> {\n  row: SR;\n}\n\nfunction SummaryCell<R, SR>({\n  column,\n  colSpan,\n  row,\n  isCellSelected,\n  selectCell\n}: SummaryCellProps<R, SR>) {\n  const { ref, tabIndex, onFocus } = useRovingCellRef(isCellSelected);\n  const { summaryFormatter: SummaryFormatter, summaryCellClass } = column;\n  const className = getCellClassname(\n    column,\n    typeof summaryCellClass === 'function' ? summaryCellClass(row) : summaryCellClass\n  );\n\n  function onClick() {\n    selectCell(row, column);\n  }\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1}\n      aria-colspan={colSpan}\n      aria-selected={isCellSelected}\n      ref={ref}\n      tabIndex={tabIndex}\n      className={className}\n      style={getCellStyle(column, colSpan)}\n      onClick={onClick}\n      onFocus={onFocus}\n    >\n      {SummaryFormatter && (\n        <SummaryFormatter column={column} row={row} isCellSelected={isCellSelected} />\n      )}\n    </div>\n  );\n}\n\nexport default memo(SummaryCell) as <R, SR>(props: SummaryCellProps<R, SR>) => JSX.Element;\n","import { memo } from 'react';\nimport clsx from 'clsx';\nimport { css } from '@linaria/core';\n\nimport { cell, row, rowClassname } from './style';\nimport { getColSpan } from './utils';\nimport SummaryCell from './SummaryCell';\nimport type { CalculatedColumn, RowRendererProps } from './types';\nimport { useRovingRowRef } from './hooks';\n\ntype SharedRowRendererProps<R, SR> = Pick<RowRendererProps<R, SR>, 'viewportColumns' | 'rowIdx'>;\n\ninterface SummaryRowProps<R, SR> extends SharedRowRendererProps<R, SR> {\n  'aria-rowindex': number;\n  row: SR;\n  bottom: number;\n  lastFrozenColumnIndex: number;\n  selectedCellIdx: number | undefined;\n  selectCell: (row: SR, column: CalculatedColumn<R, SR>) => void;\n}\n\nconst summaryRow = css`\n  &.${row} {\n    position: sticky;\n    z-index: 3;\n    grid-template-rows: var(--summary-row-height);\n    height: var(--summary-row-height); /* needed on Firefox */\n    line-height: var(--summary-row-height);\n  }\n`;\n\nconst summaryRowBorderClassname = css`\n  & > .${cell} {\n    border-top: 2px solid var(--summary-border-color);\n  }\n`;\n\nconst summaryRowClassname = `rdg-summary-row ${summaryRow}`;\n\nfunction SummaryRow<R, SR>({\n  rowIdx,\n  row,\n  viewportColumns,\n  bottom,\n  lastFrozenColumnIndex,\n  selectedCellIdx,\n  selectCell,\n  'aria-rowindex': ariaRowIndex\n}: SummaryRowProps<R, SR>) {\n  const { ref, tabIndex, className } = useRovingRowRef(selectedCellIdx);\n  const cells = [];\n  for (let index = 0; index < viewportColumns.length; index++) {\n    const column = viewportColumns[index];\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'SUMMARY', row });\n    if (colSpan !== undefined) {\n      index += colSpan - 1;\n    }\n\n    const isCellSelected = selectedCellIdx === column.idx;\n\n    cells.push(\n      <SummaryCell<R, SR>\n        key={column.key}\n        column={column}\n        colSpan={colSpan}\n        row={row}\n        isCellSelected={isCellSelected}\n        selectCell={selectCell}\n      />\n    );\n  }\n\n  return (\n    <div\n      role=\"row\"\n      aria-rowindex={ariaRowIndex}\n      ref={ref}\n      tabIndex={tabIndex}\n      className={clsx(\n        rowClassname,\n        `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`,\n        summaryRowClassname,\n        { [summaryRowBorderClassname]: rowIdx === 0 },\n        className\n      )}\n      style={{ bottom }}\n    >\n      {cells}\n    </div>\n  );\n}\n\nexport default memo(SummaryRow) as <R, SR>(props: SummaryRowProps<R, SR>) => JSX.Element;\n","import { css } from '@linaria/core';\nimport { memo } from 'react';\n\nexport interface StickyRowProps {\n  \n    content: string\n    top: number\n    isStuck: boolean\n}\n\nconst headerRow = css`\n  contain: strict;\n  contain: size layout style paint;\n  display: grid;\n  height: var(--header-row-height); /* needed on Firefox */\n  line-height: var(--header-row-height);\n  width: var(--row-width);\n  position: sticky;\n  top: 0;\n  background-color: var(--header-background-color);\n  font-weight: bold;\n  z-index: 3;\n  outline: none;\n  border-bottom: 1px solid var(--border-color);\n  padding-left: 10px;\n\n  &[aria-selected='true'] {\n    box-shadow: inset 0 0 0 2px var(--selection-color);\n  }\n`;\n\nconst stickyRowClassname = `rdg-sticky-row ${headerRow}`;\n\nfunction StickyRow({\n  content,\n  top,\n  isStuck\n}: StickyRowProps) {\n  return (\n    <div\n      role=\"row\"\n      aria-rowindex={2} // aria-rowindex is 1 based\n      className={stickyRowClassname}\n      style={{\n          top,\n          position: isStuck ? 'sticky' : 'absolute'\n      }}\n    >\n      {content}\n    </div>\n  );\n}\n\nexport default memo(StickyRow) as (\n  props: StickyRowProps\n) => JSX.Element;\n","import { useEffect, useRef } from 'react';\nimport { css } from '@linaria/core';\n\nimport { useLatestFunc } from './hooks';\nimport { getCellStyle, getCellClassname, onEditorNavigation } from './utils';\nimport type { CellRendererProps, EditorProps, Omit } from './types';\n\n/*\n * To check for outside `mousedown` events, we listen to all `mousedown` events at their birth,\n * i.e. on the window during the capture phase, and at their death, i.e. on the window during the bubble phase.\n *\n * We schedule a check at the birth of the event, cancel the check when the event reaches the \"inside\" container,\n * and trigger the \"outside\" callback when the event bubbles back up to the window.\n *\n * The event can be `stopPropagation()`ed halfway through, so they may not always bubble back up to the window,\n * so an alternative check must be used. The check must happen after the event can reach the \"inside\" container,\n * and not before it run to completion. `requestAnimationFrame` is the best way we know how to achieve this.\n * Usually we want click event handlers from parent components to access the latest commited values,\n * so `mousedown` is used instead of `click`.\n *\n * We must also rely on React's event capturing/bubbling to handle elements rendered in a portal.\n */\n\nconst cellEditing = css`\n  &.rdg-cell {\n    padding: 0;\n  }\n`;\n\ntype SharedCellRendererProps<R, SR> = Pick<CellRendererProps<R, SR>, 'colSpan'>;\n\ninterface EditCellProps<R, SR>\n  extends Omit<EditorProps<R, SR>, 'onClose'>,\n    SharedCellRendererProps<R, SR> {\n  closeEditor: () => void;\n  scrollToCell: () => void;\n}\n\nexport default function EditCell<R, SR>({\n  column,\n  colSpan,\n  row,\n  onRowChange,\n  closeEditor,\n  scrollToCell\n}: EditCellProps<R, SR>) {\n  const frameRequestRef = useRef<number | undefined>();\n  const commitOnOutsideClick = column.editorOptions?.commitOnOutsideClick !== false;\n\n  // We need to prevent the `useEffect` from cleaning up between re-renders,\n  // as `onWindowCaptureMouseDown` might otherwise miss valid mousedown events.\n  // To that end we instead access the latest props via useLatestFunc.\n  const commitOnOutsideMouseDown = useLatestFunc(() => {\n    onClose(true);\n  });\n\n  useEffect(() => {\n    if (!commitOnOutsideClick) return;\n\n    function onWindowCaptureMouseDown() {\n      frameRequestRef.current = requestAnimationFrame(commitOnOutsideMouseDown);\n    }\n\n    addEventListener('mousedown', onWindowCaptureMouseDown, { capture: true });\n\n    return () => {\n      removeEventListener('mousedown', onWindowCaptureMouseDown, { capture: true });\n      cancelFrameRequest();\n    };\n  }, [commitOnOutsideClick, commitOnOutsideMouseDown]);\n\n  function cancelFrameRequest() {\n    cancelAnimationFrame(frameRequestRef.current!);\n  }\n\n  function onKeyDown(event: React.KeyboardEvent<HTMLDivElement>) {\n    if (event.key === 'Escape') {\n      event.stopPropagation();\n      // Discard changes\n      onClose();\n    } else if (event.key === 'Enter') {\n      event.stopPropagation();\n      onClose(true);\n      scrollToCell();\n    } else {\n      const onNavigation = column.editorOptions?.onNavigation ?? onEditorNavigation;\n      if (!onNavigation(event)) {\n        event.stopPropagation();\n      }\n    }\n  }\n\n  function onClose(commitChanges?: boolean) {\n    if (commitChanges) {\n      onRowChange(row, true);\n    } else {\n      closeEditor();\n    }\n  }\n\n  const { cellClass } = column;\n  const className = getCellClassname(\n    column,\n    'rdg-editor-container',\n    !column.editorOptions?.renderFormatter && cellEditing,\n    typeof cellClass === 'function' ? cellClass(row) : cellClass\n  );\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1} // aria-colindex is 1-based\n      aria-colspan={colSpan}\n      aria-selected\n      className={className}\n      style={getCellStyle(column, colSpan)}\n      onKeyDown={onKeyDown}\n      onMouseDownCapture={commitOnOutsideClick ? cancelFrameRequest : undefined}\n    >\n      {column.editor != null && (\n        <>\n          <column.editor column={column} row={row} onRowChange={onRowChange} onClose={onClose} />\n          {column.editorOptions?.renderFormatter && (\n            <column.formatter column={column} row={row} isCellSelected onRowChange={onRowChange} />\n          )}\n        </>\n      )}\n    </div>\n  );\n}\n","import { css } from '@linaria/core';\n\nimport type { CalculatedColumn, FillEvent, Position } from './types';\nimport type { DataGridProps, SelectCellState } from './DataGrid';\n\nconst cellDragHandle = css`\n  cursor: move;\n  position: absolute;\n  right: 0;\n  bottom: 0;\n  width: 8px;\n  height: 8px;\n  background-color: var(--selection-color);\n\n  &:hover {\n    width: 16px;\n    height: 16px;\n    border: 2px solid var(--selection-color);\n    background-color: var(--background-color);\n  }\n`;\n\nconst cellDragHandleClassname = `rdg-cell-drag-handle ${cellDragHandle}`;\n\ninterface Props<R, SR> extends Pick<DataGridProps<R, SR>, 'rows' | 'onRowsChange'> {\n  columns: readonly CalculatedColumn<R, SR>[];\n  selectedPosition: SelectCellState;\n  latestDraggedOverRowIdx: React.MutableRefObject<number | undefined>;\n  isCellEditable: (position: Position) => boolean;\n  onFill: (event: FillEvent<R>) => R;\n  setDragging: (isDragging: boolean) => void;\n  setDraggedOverRowIdx: (overRowIdx: number | undefined) => void;\n}\n\nexport default function DragHandle<R, SR>({\n  rows,\n  columns,\n  selectedPosition,\n  latestDraggedOverRowIdx,\n  isCellEditable,\n  onRowsChange,\n  onFill,\n  setDragging,\n  setDraggedOverRowIdx\n}: Props<R, SR>) {\n  function handleMouseDown(event: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (event.buttons !== 1) return;\n    setDragging(true);\n    window.addEventListener('mouseover', onMouseOver);\n    window.addEventListener('mouseup', onMouseUp);\n\n    function onMouseOver(event: MouseEvent) {\n      // Trigger onMouseup in edge cases where we release the mouse button but `mouseup` isn't triggered,\n      // for example when releasing the mouse button outside the iframe the grid is rendered in.\n      // https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons\n      if (event.buttons !== 1) onMouseUp();\n    }\n\n    function onMouseUp() {\n      window.removeEventListener('mouseover', onMouseOver);\n      window.removeEventListener('mouseup', onMouseUp);\n      setDragging(false);\n      handleDragEnd();\n    }\n  }\n\n  function handleDragEnd() {\n    const overRowIdx = latestDraggedOverRowIdx.current;\n    if (overRowIdx === undefined) return;\n\n    const { rowIdx } = selectedPosition;\n    const startRowIndex = rowIdx < overRowIdx ? rowIdx + 1 : overRowIdx;\n    const endRowIndex = rowIdx < overRowIdx ? overRowIdx + 1 : rowIdx;\n    updateRows(startRowIndex, endRowIndex);\n    setDraggedOverRowIdx(undefined);\n  }\n\n  function handleDoubleClick(event: React.MouseEvent<HTMLDivElement>) {\n    event.stopPropagation();\n    updateRows(selectedPosition.rowIdx + 1, rows.length);\n  }\n\n  function updateRows(startRowIdx: number, endRowIdx: number) {\n    const { idx, rowIdx } = selectedPosition;\n    const column = columns[idx];\n    const sourceRow = rows[rowIdx];\n    const updatedRows = [...rows];\n    const indexes: number[] = [];\n    for (let i = startRowIdx; i < endRowIdx; i++) {\n      if (isCellEditable({ rowIdx: i, idx })) {\n        const updatedRow = onFill({ columnKey: column.key, sourceRow, targetRow: rows[i] });\n        if (updatedRow !== rows[i]) {\n          updatedRows[i] = updatedRow;\n          indexes.push(i);\n        }\n      }\n    }\n\n    if (indexes.length > 0) {\n      onRowsChange?.(updatedRows, { indexes, column });\n    }\n  }\n\n  return (\n    <div\n      className={cellDragHandleClassname}\n      onMouseDown={handleMouseDown}\n      onDoubleClick={handleDoubleClick}\n    />\n  );\n}\n","import { forwardRef, useState, useRef, useImperativeHandle, useCallback, useMemo } from 'react';\nimport type { Key, RefAttributes } from 'react';\nimport clsx from 'clsx';\n\nimport { rootClassname, viewportDraggingClassname } from './style';\nimport {\n  useLayoutEffect,\n  useGridDimensions,\n  useCalculatedColumns,\n  useViewportColumns,\n  useViewportRows,\n  useLatestFunc,\n  RowSelectionChangeProvider\n} from './hooks';\nimport HeaderRow from './HeaderRow';\nimport Row from './Row';\nimport GroupRowRenderer from './GroupRow';\nimport SummaryRow from './SummaryRow';\nimport StickyRow from './StickyRow';\nimport EditCell from './EditCell';\nimport DragHandle from './DragHandle';\nimport {\n  assertIsValidKeyGetter,\n  isSelectedCellEditable,\n  getColSpan,\n  max,\n  sign,\n  getSelectedCellColSpan\n} from './utils';\n\nimport type {\n  CalculatedColumn,\n  Column,\n  Position,\n  RowRendererProps,\n  RowsChangeData,\n  SelectRowEvent,\n  FillEvent,\n  PasteEvent,\n  CellNavigationMode,\n  SortColumn,\n  RowHeightArgs,\n  Maybe\n} from './types';\n\nexport interface SelectCellState extends Position {\n  readonly mode: 'SELECT';\n}\n\ninterface EditCellState<R> extends Position {\n  readonly mode: 'EDIT';\n  readonly row: R;\n  readonly originalRow: R;\n}\n\ntype DefaultColumnOptions<R, SR> = Pick<\n  Column<R, SR>,\n  'formatter' | 'minWidth' | 'resizable' | 'sortable'\n>;\n\nconst initialPosition: SelectCellState = {\n  idx: -1,\n  rowIdx: -2,\n  mode: 'SELECT'\n};\n\nexport interface DataGridHandle {\n  element: HTMLDivElement | null;\n  scrollToColumn: (colIdx: number) => void;\n  scrollToRow: (rowIdx: number) => void;\n  selectCell: (position: Position, enableEditor?: Maybe<boolean>) => void;\n}\n\ntype SharedDivProps = Pick<\n  React.HTMLAttributes<HTMLDivElement>,\n  'aria-label' | 'aria-labelledby' | 'aria-describedby' | 'className' | 'style'\n>;\n\nexport interface DataGridProps<R, SR = unknown, K extends Key = Key> extends SharedDivProps {\n  /**\n   * Grid and data Props\n   */\n  /** An array of objects representing each column on the grid */\n  columns: readonly Column<R, SR>[];\n  /** A function called for each rendered row that should return a plain key/value pair object */\n  rows: readonly R[];\n  /**\n   * Rows to be pinned at the bottom of the rows view for summary, the vertical scroll bar will not scroll these rows.\n   * Bottom horizontal scroll bar can move the row left / right. Or a customized row renderer can be used to disabled the scrolling support.\n   */\n  summaryRows?: Maybe<readonly SR[]>;\n  /** The getter should return a unique key for each row */\n  rowKeyGetter?: Maybe<(row: R) => K>;\n  onRowsChange?: Maybe<(rows: R[], data: RowsChangeData<R, SR>) => void>;\n\n  /**\n   * Dimensions props\n   */\n  /**\n   * The height of each row in pixels\n   * @default 35\n   */\n  rowHeight?: Maybe<number | ((args: RowHeightArgs<R>) => number)>;\n  /**\n   * The height of the header row in pixels\n   * @default 35\n   */\n  headerRowHeight?: Maybe<number>;\n  /**\n   * The height of each summary row in pixels\n   * @default 35\n   */\n  summaryRowHeight?: Maybe<number>;\n\n  /**\n   * Feature props\n   */\n  /** Set of selected row keys */\n  selectedRows?: Maybe<ReadonlySet<K>>;\n  /** Function called whenever row selection is changed */\n  onSelectedRowsChange?: Maybe<(selectedRows: Set<K>) => void>;\n  /** Used for multi column sorting */\n  sortColumns?: Maybe<readonly SortColumn[]>;\n  onSortColumnsChange?: Maybe<(sortColumns: SortColumn[]) => void>;\n  defaultColumnOptions?: Maybe<DefaultColumnOptions<R, SR>>;\n  groupBy?: Maybe<readonly string[]>;\n  rowGrouper?: Maybe<(rows: readonly R[], columnKey: string) => Record<string, readonly R[]>>;\n  expandedGroupIds?: Maybe<ReadonlySet<unknown>>;\n  onExpandedGroupIdsChange?: Maybe<(expandedGroupIds: Set<unknown>) => void>;\n  onFill?: Maybe<(event: FillEvent<R>) => R>;\n  onPaste?: Maybe<(event: PasteEvent<R>) => R>;\n\n  /**\n   * Event props\n   */\n  /** Function called whenever a row is clicked */\n  onRowClick?: Maybe<(row: R, column: CalculatedColumn<R, SR>) => void>;\n  /** Function called whenever a row is double clicked */\n  onRowDoubleClick?: Maybe<(row: R, column: CalculatedColumn<R, SR>) => void>;\n  /** Called when the grid is scrolled */\n  onScroll?: Maybe<(event: React.UIEvent<HTMLDivElement>) => void>;\n  /** Called when a column is resized */\n  onColumnResize?: Maybe<(idx: number, width: number) => void>;\n\n  /**\n   * Toggles and modes\n   */\n  /** @default 'NONE' */\n  cellNavigationMode?: Maybe<CellNavigationMode>;\n  /** @default true */\n  enableVirtualization?: Maybe<boolean>;\n\n  /**\n   * Miscellaneous\n   */\n  rowRenderer?: Maybe<React.ComponentType<RowRendererProps<R, SR>>>;\n  noRowsFallback?: React.ReactNode;\n  rowClass?: Maybe<(row: R) => Maybe<string>>;\n  'data-testid'?: Maybe<string>;\n}\n\n/**\n * Main API Component to render a data grid of rows and columns\n *\n * @example\n *\n * <DataGrid columns={columns} rows={rows} />\n */\nfunction DataGrid<R, SR, K extends Key>(\n  {\n    // Grid and data Props\n    columns: rawColumns,\n    rows: rawRows,\n    summaryRows,\n    rowKeyGetter,\n    onRowsChange,\n    // Dimensions props\n    rowHeight,\n    headerRowHeight: rawHeaderRowHeight,\n    summaryRowHeight: rawSummaryRowHeight,\n    // Feature props\n    selectedRows,\n    onSelectedRowsChange,\n    sortColumns,\n    onSortColumnsChange,\n    defaultColumnOptions,\n    groupBy: rawGroupBy,\n    rowGrouper,\n    expandedGroupIds,\n    onExpandedGroupIdsChange,\n    // Event props\n    onRowClick,\n    onRowDoubleClick,\n    onScroll,\n    onColumnResize,\n    onFill,\n    onPaste,\n    // Toggles and modes\n    enableVirtualization,\n    // Miscellaneous\n    rowRenderer,\n    noRowsFallback,\n    className,\n    style,\n    rowClass,\n    // ARIA\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledBy,\n    'aria-describedby': ariaDescribedBy,\n    'data-testid': testId\n  }: DataGridProps<R, SR, K>,\n  ref: React.Ref<DataGridHandle>\n) {\n  /**\n   * defaults\n   */\n  rowHeight ??= 35;\n  const headerRowHeight = rawHeaderRowHeight ?? (typeof rowHeight === 'number' ? rowHeight : 35);\n  const summaryRowHeight = rawSummaryRowHeight ?? (typeof rowHeight === 'number' ? rowHeight : 35);\n  const RowRenderer = rowRenderer ?? Row;\n  enableVirtualization ??= true;\n\n  /**\n   * states\n   */\n  const [scrollTop, setScrollTop] = useState(0);\n  const [scrollLeft, setScrollLeft] = useState(0);\n  const [columnWidths, setColumnWidths] = useState<ReadonlyMap<string, number>>(() => new Map());\n  const [selectedPosition, setSelectedPosition] = useState<SelectCellState | EditCellState<R>>(\n    initialPosition\n  );\n  const [copiedCell, setCopiedCell] = useState<{ row: R; columnKey: string } | null>(null);\n  const [isDragging, setDragging] = useState(false);\n  const [draggedOverRowIdx, setOverRowIdx] = useState<number | undefined>(undefined);\n\n  /**\n   * refs\n   */\n  const prevSelectedPosition = useRef(selectedPosition);\n  const latestDraggedOverRowIdx = useRef(draggedOverRowIdx);\n  const lastSelectedRowIdx = useRef(-1);\n\n  /**\n   * computed values\n   */\n  const [gridRef, gridWidth, gridHeight] = useGridDimensions();\n  const headerRowsCount = 1;\n  const summaryRowsCount = summaryRows?.length ?? 0;\n  const clientHeight = gridHeight - headerRowHeight - summaryRowsCount * summaryRowHeight;\n  const isSelectable = selectedRows != null && onSelectedRowsChange != null;\n  const isHeaderRowSelected = selectedPosition.rowIdx === -1;\n\n  const allRowsSelected = useMemo((): boolean => {\n    // no rows to select = explicitely unchecked\n    const { length } = rawRows;\n    return (\n      length !== 0 &&\n      selectedRows != null &&\n      rowKeyGetter != null &&\n      selectedRows.size >= length &&\n      rawRows.every((row) => selectedRows.has(rowKeyGetter(row)))\n    );\n  }, [rawRows, selectedRows, rowKeyGetter]);\n\n  const {\n    columns,\n    colSpanColumns,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    layoutCssVars,\n    columnMetrics,\n    totalColumnWidth,\n    lastFrozenColumnIndex,\n    totalFrozenColumnWidth,\n    groupBy\n  } = useCalculatedColumns({\n    rawColumns,\n    columnWidths,\n    scrollLeft,\n    viewportWidth: gridWidth,\n    defaultColumnOptions,\n    rawGroupBy: rowGrouper ? rawGroupBy : undefined,\n    enableVirtualization\n  });\n\n  const {\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    rowsCount,\n    stickyRowIndexes,\n    stickyRowIndex,\n    totalRowHeight,\n    isGroupRow,\n    getRowTop,\n    getRowHeight\n  } = useViewportRows({\n    rawRows,\n    groupBy,\n    rowGrouper,\n    rowHeight,\n    clientHeight,\n    scrollTop,\n    expandedGroupIds,\n    enableVirtualization\n  });\n\n  const viewportColumns = useViewportColumns({\n    columns,\n    colSpanColumns,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    lastFrozenColumnIndex,\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    summaryRows,\n    isGroupRow\n  });\n\n  const hasGroups = groupBy.length > 0 && typeof rowGrouper === 'function';\n  const minColIdx = hasGroups ? -1 : 0;\n  const maxColIdx = columns.length - 1;\n  const minRowIdx = -1; // change it to 0?\n  const maxRowIdx = headerRowsCount + rows.length + summaryRowsCount - 2;\n  const selectedCellIsWithinSelectionBounds = isCellWithinSelectionBounds(selectedPosition);\n  const selectedCellIsWithinViewportBounds = isCellWithinViewportBounds(selectedPosition);\n\n  /**\n   * The identity of the wrapper function is stable so it won't break memoization\n   */\n  const selectRowLatest = useLatestFunc(selectRow);\n  const selectAllRowsLatest = useLatestFunc(selectAllRows);\n  const handleFormatterRowChangeLatest = useLatestFunc(updateRow);\n  const selectViewportCellLatest = useLatestFunc(\n    (row: R, column: CalculatedColumn<R, SR>, enableEditor: Maybe<boolean>) => {\n      const rowIdx = rows.indexOf(row);\n      selectCell({ rowIdx, idx: column.idx }, enableEditor);\n    }\n  );\n  const selectGroupLatest = useLatestFunc((rowIdx: number) => {\n    selectCell({ rowIdx, idx: -1 });\n  });\n  const selectHeaderCellLatest = useLatestFunc((idx: number) => {\n    selectCell({ rowIdx: -1, idx });\n  });\n  const selectSummaryCellLatest = useLatestFunc(\n    (summaryRow: SR, column: CalculatedColumn<R, SR>) => {\n      const rowIdx = summaryRows!.indexOf(summaryRow) + headerRowsCount + rows.length - 1;\n      selectCell({ rowIdx, idx: column.idx });\n    }\n  );\n  const toggleGroupLatest = useLatestFunc(toggleGroup);\n\n  /**\n   * effects\n   */\n  useLayoutEffect(() => {\n    if (\n      !selectedCellIsWithinSelectionBounds ||\n      isSamePosition(selectedPosition, prevSelectedPosition.current)\n    ) {\n      prevSelectedPosition.current = selectedPosition;\n      return;\n    }\n\n    prevSelectedPosition.current = selectedPosition;\n    scrollToCell(selectedPosition);\n  });\n\n  useImperativeHandle(ref, () => ({\n    element: gridRef.current,\n    scrollToColumn(idx: number) {\n      scrollToCell({ idx });\n    },\n    scrollToRow(rowIdx: number) {\n      const { current } = gridRef;\n      if (!current) return;\n      current.scrollTo({\n        top: getRowTop(rowIdx),\n        behavior: 'smooth'\n      });\n    },\n    selectCell\n  }));\n\n  /**\n   * callbacks\n   */\n  const handleColumnResize = useCallback(\n    (column: CalculatedColumn<R, SR>, width: number) => {\n      setColumnWidths((columnWidths) => {\n        const newColumnWidths = new Map(columnWidths);\n        newColumnWidths.set(column.key, width);\n        return newColumnWidths;\n      });\n\n      onColumnResize?.(column.idx, width);\n    },\n    [onColumnResize]\n  );\n\n  const setDraggedOverRowIdx = useCallback((rowIdx?: number) => {\n    setOverRowIdx(rowIdx);\n    latestDraggedOverRowIdx.current = rowIdx;\n  }, []);\n\n  /**\n   * event handlers\n   */\n  function selectRow({ row, checked, isShiftClick }: SelectRowEvent<R>) {\n    if (!onSelectedRowsChange) return;\n\n    assertIsValidKeyGetter<R, K>(rowKeyGetter);\n    const newSelectedRows = new Set(selectedRows);\n    if (isGroupRow(row)) {\n      for (const childRow of row.childRows) {\n        const rowKey = rowKeyGetter(childRow);\n        if (checked) {\n          newSelectedRows.add(rowKey);\n        } else {\n          newSelectedRows.delete(rowKey);\n        }\n      }\n      onSelectedRowsChange(newSelectedRows);\n      return;\n    }\n\n    const rowKey = rowKeyGetter(row);\n    if (checked) {\n      newSelectedRows.add(rowKey);\n      const previousRowIdx = lastSelectedRowIdx.current;\n      const rowIdx = rows.indexOf(row);\n      lastSelectedRowIdx.current = rowIdx;\n      if (isShiftClick && previousRowIdx !== -1 && previousRowIdx !== rowIdx) {\n        const step = sign(rowIdx - previousRowIdx);\n        for (let i = previousRowIdx + step; i !== rowIdx; i += step) {\n          const row = rows[i];\n          if (isGroupRow(row)) continue;\n          newSelectedRows.add(rowKeyGetter(row));\n        }\n      }\n    } else {\n      newSelectedRows.delete(rowKey);\n      lastSelectedRowIdx.current = -1;\n    }\n\n    onSelectedRowsChange(newSelectedRows);\n  }\n\n  function selectAllRows(checked: boolean) {\n    if (!onSelectedRowsChange) return;\n\n    assertIsValidKeyGetter<R, K>(rowKeyGetter);\n    const newSelectedRows = new Set(selectedRows);\n\n    for (const row of rawRows) {\n      const rowKey = rowKeyGetter(row);\n      if (checked) {\n        newSelectedRows.add(rowKey);\n      } else {\n        newSelectedRows.delete(rowKey);\n      }\n    }\n\n    onSelectedRowsChange(newSelectedRows);\n  }\n\n  function toggleGroup(expandedGroupId: unknown) {\n    if (!onExpandedGroupIdsChange) return;\n    const newExpandedGroupIds = new Set(expandedGroupIds);\n    if (newExpandedGroupIds.has(expandedGroupId)) {\n      newExpandedGroupIds.delete(expandedGroupId);\n    } else {\n      newExpandedGroupIds.add(expandedGroupId);\n    }\n    onExpandedGroupIdsChange(newExpandedGroupIds);\n  }\n\n  function handleScroll(event: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop, scrollLeft } = event.currentTarget;\n    setScrollTop(scrollTop);\n    setScrollLeft(scrollLeft);\n    onScroll?.(event);\n  }\n\n  function getRawRowIdx(rowIdx: number) {\n    return hasGroups ? rawRows.indexOf(rows[rowIdx] as R) : rowIdx;\n  }\n\n  function updateRow(rowIdx: number, row: R) {\n    if (typeof onRowsChange !== 'function') return;\n    const rawRowIdx = getRawRowIdx(rowIdx);\n    if (row === rawRows[rawRowIdx]) return;\n    const updatedRows = [...rawRows];\n    updatedRows[rawRowIdx] = row;\n    onRowsChange(updatedRows, {\n      indexes: [rawRowIdx],\n      column: columns[selectedPosition.idx]\n    });\n  }\n\n  function commitEditorChanges() {\n    if (selectedPosition.mode !== 'EDIT') return;\n    updateRow(selectedPosition.rowIdx, selectedPosition.row);\n  }\n\n  /**\n   * utils\n   */\n  function isColIdxWithinSelectionBounds(idx: number) {\n    return idx >= minColIdx && idx <= maxColIdx;\n  }\n\n  function isRowIdxWithinViewportBounds(rowIdx: number) {\n    return rowIdx >= 0 && rowIdx < rows.length;\n  }\n\n  function isCellWithinSelectionBounds({ idx, rowIdx }: Position): boolean {\n    return rowIdx >= minRowIdx && rowIdx <= maxRowIdx && isColIdxWithinSelectionBounds(idx);\n  }\n\n  function isCellWithinViewportBounds({ idx, rowIdx }: Position): boolean {\n    return isRowIdxWithinViewportBounds(rowIdx) && isColIdxWithinSelectionBounds(idx);\n  }\n\n  function isCellEditable(position: Position): boolean {\n    return (\n      isCellWithinViewportBounds(position) &&\n      isSelectedCellEditable({ columns, rows, selectedPosition: position, isGroupRow })\n    );\n  }\n\n  function selectCell(position: Position, enableEditor?: Maybe<boolean>): void {\n    if (!isCellWithinSelectionBounds(position)) return;\n    commitEditorChanges();\n\n    if (enableEditor && isCellEditable(position)) {\n      const row = rows[position.rowIdx] as R;\n      setSelectedPosition({ ...position, mode: 'EDIT', row, originalRow: row });\n    } else if (isSamePosition(selectedPosition, position)) {\n      // Avoid re-renders if the selected cell state is the same\n      // TODO: replace with a #record? https://github.com/microsoft/TypeScript/issues/39831\n      scrollToCell(position);\n    } else {\n      setSelectedPosition({ ...position, mode: 'SELECT' });\n    }\n  }\n\n  function scrollToCell({ idx, rowIdx }: Partial<Position>): void {\n    const { current } = gridRef;\n    if (!current) return;\n\n    if (typeof idx === 'number' && idx > lastFrozenColumnIndex) {\n      rowIdx ??= selectedPosition.rowIdx;\n      if (!isCellWithinSelectionBounds({ rowIdx, idx })) return;\n      const { clientWidth } = current;\n      const column = columns[idx];\n      const { left, width } = columnMetrics.get(column)!;\n      let right = left + width;\n\n      const colSpan = getSelectedCellColSpan({\n        rows,\n        summaryRows,\n        rowIdx,\n        lastFrozenColumnIndex,\n        column,\n        isGroupRow\n      });\n\n      if (colSpan !== undefined) {\n        const { left, width } = columnMetrics.get(columns[column.idx + colSpan - 1])!;\n        right = left + width;\n      }\n\n      const isCellAtLeftBoundary = left < scrollLeft + totalFrozenColumnWidth;\n      const isCellAtRightBoundary = right > clientWidth + scrollLeft;\n      if (isCellAtLeftBoundary) {\n        current.scrollLeft = left - totalFrozenColumnWidth;\n      } else if (isCellAtRightBoundary) {\n        current.scrollLeft = right - clientWidth;\n      }\n    }\n\n    if (typeof rowIdx === 'number' && isRowIdxWithinViewportBounds(rowIdx)) {\n      const rowTop = getRowTop(rowIdx);\n      const rowHeight = getRowHeight(rowIdx);\n      if (rowTop < scrollTop) {\n        // at top boundary, scroll to the row's top\n        current.scrollTop = rowTop;\n      } else if (rowTop + rowHeight > scrollTop + clientHeight) {\n        // at bottom boundary, scroll the next row's top to the bottom of the viewport\n        current.scrollTop = rowTop + rowHeight - clientHeight;\n      }\n    }\n  }\n\n  function getDraggedOverCellIdx(currentRowIdx: number): number | undefined {\n    if (draggedOverRowIdx === undefined) return;\n    const { rowIdx } = selectedPosition;\n\n    const isDraggedOver =\n      rowIdx < draggedOverRowIdx\n        ? rowIdx < currentRowIdx && currentRowIdx <= draggedOverRowIdx\n        : rowIdx > currentRowIdx && currentRowIdx >= draggedOverRowIdx;\n\n    return isDraggedOver ? selectedPosition.idx : undefined;\n  }\n\n  function getDragHandle(rowIdx: number) {\n    if (\n      selectedPosition.rowIdx !== rowIdx ||\n      selectedPosition.mode === 'EDIT' ||\n      hasGroups || // drag fill is not supported when grouping is enabled\n      onFill == null\n    ) {\n      return;\n    }\n\n    return (\n      <DragHandle\n        rows={rawRows}\n        columns={columns}\n        selectedPosition={selectedPosition}\n        isCellEditable={isCellEditable}\n        latestDraggedOverRowIdx={latestDraggedOverRowIdx}\n        onRowsChange={onRowsChange}\n        onFill={onFill}\n        setDragging={setDragging}\n        setDraggedOverRowIdx={setDraggedOverRowIdx}\n      />\n    );\n  }\n\n  function getCellEditor(rowIdx: number) {\n    if (selectedPosition.rowIdx !== rowIdx || selectedPosition.mode === 'SELECT') return;\n\n    const { idx, row } = selectedPosition;\n    const column = columns[idx];\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row });\n\n    const closeEditor = () => {\n      setSelectedPosition(({ idx, rowIdx }) => ({ idx, rowIdx, mode: 'SELECT' }));\n    };\n\n    const onRowChange = (row: R, commitChanges?: boolean) => {\n      if (commitChanges) {\n        updateRow(selectedPosition.rowIdx, row);\n        closeEditor();\n      } else {\n        setSelectedPosition((position) => ({ ...position, row }));\n      }\n    };\n\n    if (rows[selectedPosition.rowIdx] !== selectedPosition.originalRow) {\n      // Discard changes if rows are updated from outside\n      closeEditor();\n    }\n\n    return (\n      <EditCell\n        key={column.key}\n        column={column}\n        colSpan={colSpan}\n        row={row}\n        onRowChange={onRowChange}\n        closeEditor={closeEditor}\n        scrollToCell={() => {\n          scrollToCell(selectedPosition);\n        }}\n      />\n    );\n  }\n\n  function getViewportRows() {\n    const rowElements = [];\n    let startRowIndex = 0;\n\n    const { idx: selectedIdx, rowIdx: selectedRowIdx } = selectedPosition;\n    const startRowIdx =\n      selectedCellIsWithinViewportBounds && selectedRowIdx < rowOverscanStartIdx\n        ? rowOverscanStartIdx - 1\n        : rowOverscanStartIdx;\n    const endRowIdx =\n      selectedCellIsWithinViewportBounds && selectedRowIdx > rowOverscanEndIdx\n        ? rowOverscanEndIdx + 1\n        : rowOverscanEndIdx;\n\n    for (let viewportRowIdx = startRowIdx; viewportRowIdx <= endRowIdx; viewportRowIdx++) {\n      const isRowOutsideViewport =\n        viewportRowIdx === rowOverscanStartIdx - 1 || viewportRowIdx === rowOverscanEndIdx + 1;\n      const rowIdx = isRowOutsideViewport ? selectedRowIdx : viewportRowIdx;\n\n      let rowColumns = viewportColumns;\n      const selectedColumn = columns[selectedIdx];\n      // selectedIdx can be -1 if grouping is enabled\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      if (selectedColumn !== undefined) {\n        if (isRowOutsideViewport) {\n          // if the row is outside the viewport then only render the selected cell\n          rowColumns = [selectedColumn];\n        } else if (selectedRowIdx === rowIdx && !viewportColumns.includes(selectedColumn)) {\n          // if the row is within the viewport and cell is not, add the selected column to viewport columns\n          rowColumns =\n            selectedIdx > viewportColumns[viewportColumns.length - 1].idx\n              ? [...viewportColumns, selectedColumn]\n              : [\n                  ...viewportColumns.slice(0, lastFrozenColumnIndex + 1),\n                  selectedColumn,\n                  ...viewportColumns.slice(lastFrozenColumnIndex + 1)\n                ];\n        }\n      }\n\n      if (stickyRowIndex !== undefined && stickyRowIndexes[stickyRowIndex] === rowIdx) {\n        continue;\n      }\n\n      const row = rows[rowIdx];\n      const top = getRowTop(rowIdx) + headerRowHeight;\n      if (isGroupRow(row)) {\n        ({ startRowIndex } = row);\n        const isGroupRowSelected =\n          isSelectable && row.childRows.every((cr) => selectedRows.has(rowKeyGetter!(cr)));\n        rowElements.push(\n          <GroupRowRenderer\n            aria-level={row.level + 1} // aria-level is 1-based\n            aria-setsize={row.setSize}\n            aria-posinset={row.posInSet + 1} // aria-posinset is 1-based\n            aria-rowindex={headerRowsCount + startRowIndex + 1} // aria-rowindex is 1 based\n            aria-selected={isSelectable ? isGroupRowSelected : undefined}\n            key={row.id}\n            id={row.id}\n            groupKey={row.groupKey}\n            viewportColumns={rowColumns}\n            childRows={row.childRows}\n            rowIdx={rowIdx}\n            row={row}\n            top={top}\n            height={getRowHeight(rowIdx)}\n            level={row.level}\n            isExpanded={row.isExpanded}\n            selectedCellIdx={selectedRowIdx === rowIdx ? selectedIdx : undefined}\n            isRowSelected={isGroupRowSelected}\n            selectGroup={selectGroupLatest}\n            toggleGroup={toggleGroupLatest}\n          />\n        );\n        continue;\n      }\n\n      startRowIndex++;\n      let key;\n      let isRowSelected = false;\n      if (typeof rowKeyGetter === 'function') {\n        key = rowKeyGetter(row);\n        isRowSelected = selectedRows?.has(key) ?? false;\n      } else {\n        key = hasGroups ? startRowIndex : rowIdx;\n      }\n\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      if (typeof row === 'object' && (row as any).isStickyRow) {\n        rowElements.push(\n          <StickyRow\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            content={(row as any).content}\n            key={key}\n            isStuck={false}\n            top={top}\n          />\n        );\n        continue;\n      }\n\n      rowElements.push(\n        <RowRenderer\n          aria-rowindex={headerRowsCount + (hasGroups ? startRowIndex : rowIdx) + 1} // aria-rowindex is 1 based\n          aria-selected={isSelectable ? isRowSelected : undefined}\n          key={key}\n          rowIdx={rowIdx}\n          row={row}\n          viewportColumns={rowColumns}\n          isRowSelected={isRowSelected}\n          onRowClick={onRowClick}\n          onRowDoubleClick={onRowDoubleClick}\n          rowClass={rowClass}\n          top={top}\n          height={getRowHeight(rowIdx)}\n          copiedCellIdx={\n            copiedCell !== null && copiedCell.row === row\n              ? columns.findIndex((c) => c.key === copiedCell.columnKey)\n              : undefined\n          }\n          selectedCellIdx={selectedRowIdx === rowIdx ? selectedIdx : undefined}\n          draggedOverCellIdx={getDraggedOverCellIdx(rowIdx)}\n          setDraggedOverRowIdx={isDragging ? setDraggedOverRowIdx : undefined}\n          lastFrozenColumnIndex={lastFrozenColumnIndex}\n          onRowChange={handleFormatterRowChangeLatest}\n          selectCell={selectViewportCellLatest}\n          selectedCellDragHandle={getDragHandle(rowIdx)}\n          selectedCellEditor={getCellEditor(rowIdx)}\n        />\n      );\n    }\n\n    return rowElements;\n  }\n\n  // Reset the positions if the current values are no longer valid. This can happen if a column or row is removed\n  if (selectedPosition.idx > maxColIdx || selectedPosition.rowIdx > maxRowIdx) {\n    setSelectedPosition(initialPosition);\n    setDraggedOverRowIdx(undefined);\n  }\n\n  return (\n    <div\n      role={hasGroups ? 'treegrid' : 'grid'}\n      aria-label={ariaLabel}\n      aria-labelledby={ariaLabelledBy}\n      aria-describedby={ariaDescribedBy}\n      aria-multiselectable={isSelectable ? true : undefined}\n      aria-colcount={columns.length}\n      aria-rowcount={headerRowsCount + rowsCount + summaryRowsCount}\n      className={clsx(rootClassname, { [viewportDraggingClassname]: isDragging }, className)}\n      style={\n        {\n          ...style,\n          '--header-row-height': `${headerRowHeight}px`,\n          '--row-width': `${totalColumnWidth}px`,\n          '--summary-row-height': `${summaryRowHeight}px`,\n          ...layoutCssVars\n        } as unknown as React.CSSProperties\n      }\n      ref={gridRef}\n      onScroll={handleScroll}\n      data-testid={testId}\n    >\n      <HeaderRow\n        columns={viewportColumns}\n        onColumnResize={handleColumnResize}\n        allRowsSelected={allRowsSelected}\n        onAllRowsSelectionChange={selectAllRowsLatest}\n        sortColumns={sortColumns}\n        onSortColumnsChange={onSortColumnsChange}\n        lastFrozenColumnIndex={lastFrozenColumnIndex}\n        selectedCellIdx={isHeaderRowSelected ? selectedPosition.idx : undefined}\n        selectCell={selectHeaderCellLatest}\n        shouldFocusGrid={!selectedCellIsWithinSelectionBounds}\n      />\n      {stickyRowIndex !== undefined && stickyRowIndexes.length ? (\n        <StickyRow\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          content={(rows[stickyRowIndexes[stickyRowIndex]] as any).content}\n          isStuck\n          top={headerRowHeight}\n        />\n      ) : null}\n      {rows.length === 0 && noRowsFallback ? (\n        noRowsFallback\n      ) : (\n        <>\n          <div style={{ height: max(totalRowHeight, clientHeight) }} />\n          <RowSelectionChangeProvider value={selectRowLatest}>\n            {getViewportRows()}\n          </RowSelectionChangeProvider>\n          {summaryRows?.map((row, rowIdx) => {\n            const isSummaryRowSelected =\n              selectedPosition.rowIdx === headerRowsCount + rows.length + rowIdx - 1;\n            return (\n              <SummaryRow\n                aria-rowindex={headerRowsCount + rowsCount + rowIdx + 1}\n                key={rowIdx}\n                rowIdx={rowIdx}\n                row={row}\n                bottom={summaryRowHeight * (summaryRows.length - 1 - rowIdx)}\n                viewportColumns={viewportColumns}\n                lastFrozenColumnIndex={lastFrozenColumnIndex}\n                selectedCellIdx={isSummaryRowSelected ? selectedPosition.idx : undefined}\n                selectCell={selectSummaryCellLatest}\n              />\n            );\n          })}\n        </>\n      )}\n    </div>\n  );\n}\n\nfunction isSamePosition(p1: Position, p2: Position) {\n  return p1.idx === p2.idx && p1.rowIdx === p2.rowIdx;\n}\n\nexport default forwardRef(DataGrid) as <R, SR = unknown, K extends Key = Key>(\n  props: DataGridProps<R, SR, K> & RefAttributes<DataGridHandle>\n) => JSX.Element;\n","import { css } from '@linaria/core';\nimport type { EditorProps } from '../types';\n\nconst textEditor = css`\n  appearance: none;\n\n  box-sizing: border-box;\n  width: 100%;\n  height: 100%;\n  padding: 0px 6px 0 6px;\n  border: 2px solid #ccc;\n  vertical-align: top;\n  color: var(--color);\n  background-color: var(--background-color);\n\n  font-family: inherit;\n  font-size: var(--font-size);\n\n  &:focus {\n    border-color: var(--selection-color);\n    outline: none;\n  }\n\n  &::placeholder {\n    color: #999;\n    opacity: 1;\n  }\n`;\n\nexport const textEditorClassname = `rdg-text-editor ${textEditor}`;\n\nfunction autoFocusAndSelect(input: HTMLInputElement | null) {\n  input?.focus();\n  input?.select();\n}\n\nexport default function TextEditor<TRow, TSummaryRow>({\n  row,\n  column,\n  onRowChange,\n  onClose\n}: EditorProps<TRow, TSummaryRow>) {\n  return (\n    <input\n      className={textEditorClassname}\n      ref={autoFocusAndSelect}\n      value={row[column.key as keyof TRow] as unknown as string}\n      onChange={(event) => onRowChange({ ...row, [column.key]: event.target.value })}\n      onBlur={() => onClose(true)}\n    />\n  );\n}\n"],"names":["cell","cellClassname","cellFrozen","cellFrozenClassname","cellFrozenLast","cellFrozenLastClassname","root","rootClassname","viewportDragging","viewportDraggingClassname","row","rowClassname","useLayoutEffect","window","useEffect","useOriginalLayoutEffect","useFocusRef","isSelected","ref","useRef","current","focus","preventScroll","tabIndex","checkboxLabel","checkboxLabelClassname","checkboxInput","checkboxInputClassname","checkbox","checkboxClassname","checkboxLabelDisabled","checkboxLabelDisabledClassname","SelectCellFormatter","value","isCellSelected","disabled","onClick","onChange","ariaLabel","ariaLabelledBy","handleChange","e","target","checked","nativeEvent","shiftKey","_jsxs","clsx","_jsx","ValueFormatter","props","_Fragment","column","key","groupCellContent","groupCellContentClassname","caret","caretClassname","ToggleGroupFormatter","groupKey","isExpanded","toggleGroup","handleKeyDown","d","RowSelectionContext","createContext","undefined","RowSelectionProvider","Provider","RowSelectionChangeContext","RowSelectionChangeProvider","useRowSelection","rowSelectionContext","useContext","rowSelectionChangeContext","Error","getColSpan","lastFrozenColumnIndex","args","colSpan","Number","isInteger","frozen","idx","stopPropagation","event","onEditorNavigation","HTMLInputElement","HTMLTextAreaElement","HTMLSelectElement","matches","isSelectedCellEditable","selectedPosition","columns","rows","isGroupRow","rowIdx","isCellEditable","editor","rowGroup","editable","getSelectedCellColSpan","summaryRows","type","length","min","max","floor","sign","Math","assertIsValidKeyGetter","keyGetter","getCellStyle","gridColumnStart","gridColumnEnd","left","getCellClassname","extraClasses","isLastFrozenColumn","SELECT_COLUMN_KEY","SelectFormatter","isRowSelected","onRowSelectionChange","isShiftClick","SelectGroupFormatter","SelectColumn","name","width","maxWidth","resizable","sortable","headerRenderer","allRowsSelected","onAllRowsSelectionChange","formatter","groupFormatter","useCalculatedColumns","rawColumns","columnWidths","viewportWidth","scrollLeft","defaultColumnOptions","rawGroupBy","enableVirtualization","minColumnWidth","minWidth","defaultFormatter","defaultSortable","defaultResizable","colSpanColumns","groupBy","useMemo","map","rawColumn","includes","sort","aKey","frozenA","bKey","frozenB","indexOf","forEach","push","layoutCssVars","totalColumnWidth","totalFrozenColumnWidth","columnMetrics","Map","templateColumns","allocatedWidth","unassignedColumnsCount","getSpecifiedWidth","clampColumnWidth","set","unallocatedWidth","unallocatedColumnWidth","has","columnMetric","get","i","colOverscanStartIdx","colOverscanEndIdx","viewportLeft","viewportRight","lastColIdx","firstUnfrozenColumnIdx","colVisibleStartIdx","colVisibleEndIdx","test","parseInt","useGridDimensions","gridRef","gridWidth","setGridWidth","useState","gridHeight","setGridHeight","ResizeObserver","resizeObserver","clientWidth","clientHeight","devicePixelRatio","observe","disconnect","useLatestFunc","fn","useCallback","useRovingCellRef","isChildFocused","forceRender","onFocus","isFocused","rowSelected","rowSelectedClassname","useRovingRowRef","selectedCellIdx","className","useViewportColumns","rowOverscanStartIdx","rowOverscanEndIdx","startIdx","updateStartIdx","colIdx","viewportColumns","isReadonlyArray","arr","Array","isArray","useViewportRows","rawRows","rowHeight","scrollTop","rowGrouper","expandedGroupIds","groupedRows","rowsCount","groupRows","groupByKey","remainingGroupByKeys","startRowIndex","groupRowsCount","groups","childRows","Object","entries","childGroups","childRowsCount","allGroupRows","Set","flattenedRows","expandGroup","parentId","level","keys","posInSet","id","groupRow","setSize","add","stickyRowIndexes","stickyRowInfo","r","isStickyRow","totalRowHeight","getRowTop","getRowHeight","findRowIdx","offset","rowPositions","currentRowHeight","position","top","height","validateRowIdx","start","end","middle","currentOffset","stickyRowIndex","rowVisibleStartIdx","rowIndex","overscanThreshold","rowVisibleEndIdx","headerSortCell","headerSortCellClassname","headerSortName","headerSortNameClassname","arrow","arrowClassname","SortableHeaderCell","onSort","sortDirection","priority","children","preventDefault","ctrlKey","metaKey","handleClick","cellResizable","cellResizableClassname","HeaderCell","onColumnResize","sortColumns","onSortColumnsChange","selectCell","shouldFocusGrid","sortIndex","findIndex","columnKey","sortColumn","direction","ariaSort","headerCellClass","onPointerDown","pointerType","buttons","currentTarget","pointerId","right","getBoundingClientRect","clientX","onPointerMove","onLostPointerCapture","removeEventListener","setPointerCapture","addEventListener","ctrlClick","sortDescendingFirst","nextSort","nextSortColumn","nextSortColumns","splice","getCell","headerRow","headerRowClassname","HeaderRow","cells","index","memo","cellCopied","cellCopiedClassname","cellDraggedOver","cellDraggedOverClassname","Cell","isCopied","isDraggedOver","dragHandle","onRowClick","onRowDoubleClick","onRowChange","cellClass","selectCellWrapper","openEditor","editorOptions","editOnClick","handleContextMenu","handleDoubleClick","Row","copiedCellIdx","draggedOverCellIdx","selectedCellEditor","selectedCellDragHandle","rowClass","setDraggedOverRowIdx","onMouseEnter","zIndex","handleRowChange","newRow","handleDragEnter","RowWithRef","forwardRef","GroupCell","groupColumnIndex","toggleGroupWrapper","isLevelMatching","cursor","groupRowClassname","GroupedRow","selectGroup","handleSelectGroup","SummaryCell","summaryFormatter","SummaryFormatter","summaryCellClass","summaryRow","summaryRowBorderClassname","summaryRowClassname","SummaryRow","bottom","ariaRowIndex","stickyRowClassname","StickyRow","content","isStuck","cellEditing","EditCell","closeEditor","scrollToCell","frameRequestRef","commitOnOutsideClick","commitOnOutsideMouseDown","onClose","onWindowCaptureMouseDown","requestAnimationFrame","capture","cancelFrameRequest","cancelAnimationFrame","onKeyDown","onNavigation","commitChanges","renderFormatter","cellDragHandle","cellDragHandleClassname","DragHandle","latestDraggedOverRowIdx","onRowsChange","onFill","setDragging","handleMouseDown","onMouseOver","onMouseUp","handleDragEnd","overRowIdx","endRowIndex","updateRows","startRowIdx","endRowIdx","sourceRow","updatedRows","indexes","updatedRow","targetRow","initialPosition","mode","DataGrid","rowKeyGetter","headerRowHeight","rawHeaderRowHeight","summaryRowHeight","rawSummaryRowHeight","selectedRows","onSelectedRowsChange","onExpandedGroupIdsChange","onScroll","onPaste","rowRenderer","noRowsFallback","style","ariaDescribedBy","testId","RowRenderer","setScrollTop","setScrollLeft","setColumnWidths","setSelectedPosition","copiedCell","setCopiedCell","isDragging","draggedOverRowIdx","setOverRowIdx","prevSelectedPosition","lastSelectedRowIdx","headerRowsCount","summaryRowsCount","isSelectable","isHeaderRowSelected","size","every","hasGroups","minColIdx","maxColIdx","minRowIdx","maxRowIdx","selectedCellIsWithinSelectionBounds","isCellWithinSelectionBounds","selectedCellIsWithinViewportBounds","isCellWithinViewportBounds","selectRowLatest","selectRow","selectAllRowsLatest","selectAllRows","handleFormatterRowChangeLatest","updateRow","selectViewportCellLatest","enableEditor","selectGroupLatest","selectHeaderCellLatest","selectSummaryCellLatest","toggleGroupLatest","isSamePosition","useImperativeHandle","element","scrollToColumn","scrollToRow","scrollTo","behavior","handleColumnResize","newColumnWidths","newSelectedRows","childRow","rowKey","delete","previousRowIdx","step","expandedGroupId","newExpandedGroupIds","handleScroll","getRawRowIdx","rawRowIdx","commitEditorChanges","isColIdxWithinSelectionBounds","isRowIdxWithinViewportBounds","originalRow","isCellAtLeftBoundary","isCellAtRightBoundary","rowTop","getDraggedOverCellIdx","currentRowIdx","getDragHandle","getCellEditor","getViewportRows","rowElements","selectedIdx","selectedRowIdx","viewportRowIdx","isRowOutsideViewport","rowColumns","selectedColumn","slice","isGroupRowSelected","cr","c","isSummaryRowSelected","p1","p2","textEditor","textEditorClassname","autoFocusAndSelect","input","select","TextEditor"],"mappings":"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"}